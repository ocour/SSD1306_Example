
SSD1306_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005108  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d0  080053d0  00020330  2**0
                  CONTENTS
  4 .ARM          00000000  080053d0  080053d0  00020330  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053d0  080053d0  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  080053d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000330  08005708  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08005708  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3da  00000000  00000000  00020359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca5  00000000  00000000  0002a733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018117  00000000  00000000  0002d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c756  00000000  00000000  00045967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008641e  00000000  00000000  000520bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d84db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d8  00000000  00000000  000d852c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000330 	.word	0x20000330
 8000128:	00000000 	.word	0x00000000
 800012c:	080051fc 	.word	0x080051fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000334 	.word	0x20000334
 8000148:	080051fc 	.word	0x080051fc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	hfont.font = SSD1306_Font6x8;
 8000152:	4b1a      	ldr	r3, [pc, #104]	; (80001bc <main+0x70>)
 8000154:	4a1a      	ldr	r2, [pc, #104]	; (80001c0 <main+0x74>)
 8000156:	605a      	str	r2, [r3, #4]
	hfont.height = 8;
 8000158:	4b18      	ldr	r3, [pc, #96]	; (80001bc <main+0x70>)
 800015a:	2208      	movs	r2, #8
 800015c:	705a      	strb	r2, [r3, #1]
	hfont.width = 6;
 800015e:	4b17      	ldr	r3, [pc, #92]	; (80001bc <main+0x70>)
 8000160:	2206      	movs	r2, #6
 8000162:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fb36 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f834 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8d0 	bl	8000310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f8a4 	bl	80002bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000174:	f000 f874 	bl	8000260 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Initialise SSD1306 */
  SSD1306_Init(&hi2c1, &hssd, SSD1306_128_32_ADDR);
 8000178:	2278      	movs	r2, #120	; 0x78
 800017a:	4912      	ldr	r1, [pc, #72]	; (80001c4 <main+0x78>)
 800017c:	4812      	ldr	r0, [pc, #72]	; (80001c8 <main+0x7c>)
 800017e:	f003 fee1 	bl	8003f44 <SSD1306_Init>

  /* Call Display to write empty buffer to display */
  SSD1306_Display(&hssd);
 8000182:	4810      	ldr	r0, [pc, #64]	; (80001c4 <main+0x78>)
 8000184:	f003 fcda 	bl	8003b3c <SSD1306_Display>

  /* Draw Bitmap */
  SSD1306_DrawBitmap(&hssd, 0, 0, REM, REM_WIDTH, REM_HEIGHT, SSD1306_COLOR_BLACK);
 8000188:	2300      	movs	r3, #0
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	2320      	movs	r3, #32
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	2320      	movs	r3, #32
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <main+0x80>)
 8000196:	2200      	movs	r2, #0
 8000198:	2100      	movs	r1, #0
 800019a:	480a      	ldr	r0, [pc, #40]	; (80001c4 <main+0x78>)
 800019c:	f003 fdca 	bl	8003d34 <SSD1306_DrawBitmap>

  /* Draw "Hello, world!" */
  SSD1306_DrawString(&hssd, &hfont, "Hello, world!", 32, 16, SSD1306_COLOR_BLACK);
 80001a0:	2300      	movs	r3, #0
 80001a2:	9301      	str	r3, [sp, #4]
 80001a4:	2310      	movs	r3, #16
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	2320      	movs	r3, #32
 80001aa:	4a09      	ldr	r2, [pc, #36]	; (80001d0 <main+0x84>)
 80001ac:	4903      	ldr	r1, [pc, #12]	; (80001bc <main+0x70>)
 80001ae:	4805      	ldr	r0, [pc, #20]	; (80001c4 <main+0x78>)
 80001b0:	f003 fe94 	bl	8003edc <SSD1306_DrawString>

  /* Call Display to write changes to display */
  SSD1306_Display(&hssd);
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <main+0x78>)
 80001b6:	f003 fcc1 	bl	8003b3c <SSD1306_Display>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <main+0x6e>
 80001bc:	200005f4 	.word	0x200005f4
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	200003e4 	.word	0x200003e4
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	20000000 	.word	0x20000000
 80001d0:	08005214 	.word	0x08005214

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f004 f83a 	bl	800425c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f6:	2301      	movs	r3, #1
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000208:	2302      	movs	r3, #2
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000212:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f002 ff5b 	bl	80030d8 <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000228:	f000 f8e0 	bl	80003ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000230:	2302      	movs	r3, #2
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f003 f9c8 	bl	80035dc <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000252:	f000 f8cb 	bl	80003ec <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000266:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <MX_I2C1_Init+0x54>)
 8000268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_I2C1_Init+0x50>)
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <MX_I2C1_Init+0x58>)
 800026e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_I2C1_Init+0x50>)
 800027e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_I2C1_Init+0x50>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <MX_I2C1_Init+0x50>)
 800029e:	f000 fe49 	bl	8000f34 <HAL_I2C_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a8:	f000 f8a0 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000034c 	.word	0x2000034c
 80002b4:	40005400 	.word	0x40005400
 80002b8:	00061a80 	.word	0x00061a80

080002bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c2:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_USART2_UART_Init+0x50>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f003 fb0a 	bl	800390c <HAL_UART_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002fe:	f000 f875 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200003a0 	.word	0x200003a0
 800030c:	40004400 	.word	0x40004400

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <MX_GPIO_Init+0xcc>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a26      	ldr	r2, [pc, #152]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <MX_GPIO_Init+0xcc>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2120      	movs	r1, #32
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xd0>)
 800038a:	f000 fd99 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_GPIO_Init+0xd4>)
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4811      	ldr	r0, [pc, #68]	; (80003e8 <MX_GPIO_Init+0xd8>)
 80003a4:	f000 fc08 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a8:	2320      	movs	r3, #32
 80003aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <MX_GPIO_Init+0xd0>)
 80003c0:	f000 fbfa 	bl	8000bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f000 fb3c 	bl	8000a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f000 fb55 	bl	8000a7e <HAL_NVIC_EnableIRQ>

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800
 80003e4:	10110000 	.word	0x10110000
 80003e8:	40011000 	.word	0x40011000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <Error_Handler+0x8>
	...

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <HAL_MspInit+0x5c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <HAL_MspInit+0x5c>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x60>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x60>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a21      	ldr	r2, [pc, #132]	; (80004fc <HAL_I2C_MspInit+0xa0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d13a      	bne.n	80004f2 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	4b20      	ldr	r3, [pc, #128]	; (8000500 <HAL_I2C_MspInit+0xa4>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a1f      	ldr	r2, [pc, #124]	; (8000500 <HAL_I2C_MspInit+0xa4>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <HAL_I2C_MspInit+0xa4>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0308 	and.w	r3, r3, #8
 8000490:	613b      	str	r3, [r7, #16]
 8000492:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800049a:	2312      	movs	r3, #18
 800049c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049e:	2303      	movs	r3, #3
 80004a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	4619      	mov	r1, r3
 80004a8:	4816      	ldr	r0, [pc, #88]	; (8000504 <HAL_I2C_MspInit+0xa8>)
 80004aa:	f000 fb85 	bl	8000bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <HAL_I2C_MspInit+0xac>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24
 80004b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
 80004c4:	4a10      	ldr	r2, [pc, #64]	; (8000508 <HAL_I2C_MspInit+0xac>)
 80004c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <HAL_I2C_MspInit+0xa4>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <HAL_I2C_MspInit+0xa4>)
 80004d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_I2C_MspInit+0xa4>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	201f      	movs	r0, #31
 80004e8:	f000 faad 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80004ec:	201f      	movs	r0, #31
 80004ee:	f000 fac6 	bl	8000a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40005400 	.word	0x40005400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010c00 	.word	0x40010c00
 8000508:	40010000 	.word	0x40010000

0800050c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a15      	ldr	r2, [pc, #84]	; (800057c <HAL_UART_MspInit+0x70>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d123      	bne.n	8000574 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_UART_MspInit+0x74>)
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <HAL_UART_MspInit+0x74>)
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000536:	61d3      	str	r3, [r2, #28]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_UART_MspInit+0x74>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_UART_MspInit+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <HAL_UART_MspInit+0x74>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_UART_MspInit+0x74>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0304 	and.w	r3, r3, #4
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800055c:	230c      	movs	r3, #12
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	2302      	movs	r3, #2
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <HAL_UART_MspInit+0x78>)
 8000570:	f000 fb22 	bl	8000bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40004400 	.word	0x40004400
 8000580:	40021000 	.word	0x40021000
 8000584:	40010800 	.word	0x40010800

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ce:	f000 f947 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <I2C1_EV_IRQHandler+0x10>)
 80005de:	f000 ffb1 	bl	8001544 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000034c 	.word	0x2000034c

080005ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005f4:	f000 fc7c 	bl	8000ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return 1;
 8000600:	2301      	movs	r3, #1
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <_kill>:

int _kill(int pid, int sig)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000614:	f003 fde6 	bl	80041e4 <__errno>
 8000618:	4603      	mov	r3, r0
 800061a:	2216      	movs	r2, #22
 800061c:	601a      	str	r2, [r3, #0]
  return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_exit>:

void _exit (int status)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000632:	f04f 31ff 	mov.w	r1, #4294967295
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff ffe7 	bl	800060a <_kill>
  while (1) {}    /* Make sure we hang here */
 800063c:	e7fe      	b.n	800063c <_exit+0x12>

0800063e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e00a      	b.n	8000666 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000650:	f3af 8000 	nop.w
 8000654:	4601      	mov	r1, r0
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	b2ca      	uxtb	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3301      	adds	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	dbf0      	blt.n	8000650 <_read+0x12>
  }

  return len;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	e009      	b.n	800069e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	60ba      	str	r2, [r7, #8]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3301      	adds	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	dbf1      	blt.n	800068a <_write+0x12>
  }
  return len;
 80006a6:	687b      	ldr	r3, [r7, #4]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <_close>:

int _close(int file)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006d6:	605a      	str	r2, [r3, #4]
  return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <_isatty>:

int _isatty(int file)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006ec:	2301      	movs	r3, #1
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <_sbrk+0x5c>)
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <_sbrk+0x60>)
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <_sbrk+0x64>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <_sbrk+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	d207      	bcs.n	8000750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000740:	f003 fd50 	bl	80041e4 <__errno>
 8000744:	4603      	mov	r3, r0
 8000746:	220c      	movs	r2, #12
 8000748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	e009      	b.n	8000764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <_sbrk+0x64>)
 8000760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000762:	68fb      	ldr	r3, [r7, #12]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20005000 	.word	0x20005000
 8000770:	00000400 	.word	0x00000400
 8000774:	200005fc 	.word	0x200005fc
 8000778:	20000618 	.word	0x20000618

0800077c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ae:	f7ff ffe5 	bl	800077c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b2:	f003 fd2f 	bl	8004214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b6:	f7ff fcc9 	bl	800014c <main>
  bx lr
 80007ba:	4770      	bx	lr
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80007c4:	080053d8 	.word	0x080053d8
  ldr r2, =_sbss
 80007c8:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 80007cc:	20000614 	.word	0x20000614

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_Init+0x28>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_Init+0x28>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f923 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f808 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff fe02 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40022000 	.word	0x40022000

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_InitTick+0x54>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x58>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f93b 	bl	8000a9a <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f000 f903 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_InitTick+0x5c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000080 	.word	0x20000080
 8000858:	20000088 	.word	0x20000088
 800085c:	20000084 	.word	0x20000084

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x1c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x20>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a03      	ldr	r2, [pc, #12]	; (8000880 <HAL_IncTick+0x20>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000088 	.word	0x20000088
 8000880:	20000600 	.word	0x20000600

08000884 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <HAL_GetTick+0x10>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000600 	.word	0x20000600

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <__NVIC_EnableIRQ+0x34>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff90 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff2d 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff42 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff90 	bl	8000988 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5f 	bl	8000934 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff35 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d005      	beq.n	8000ad6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2204      	movs	r2, #4
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e051      	b.n	8000b7a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f022 020e 	bic.w	r2, r2, #14
 8000ae4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 0201 	bic.w	r2, r2, #1
 8000af4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <HAL_DMA_Abort_IT+0xd0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d029      	beq.n	8000b54 <HAL_DMA_Abort_IT+0xa0>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <HAL_DMA_Abort_IT+0xd4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d022      	beq.n	8000b50 <HAL_DMA_Abort_IT+0x9c>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <HAL_DMA_Abort_IT+0xd8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d01a      	beq.n	8000b4a <HAL_DMA_Abort_IT+0x96>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_DMA_Abort_IT+0xdc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d012      	beq.n	8000b44 <HAL_DMA_Abort_IT+0x90>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <HAL_DMA_Abort_IT+0xe0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00a      	beq.n	8000b3e <HAL_DMA_Abort_IT+0x8a>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <HAL_DMA_Abort_IT+0xe4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d102      	bne.n	8000b38 <HAL_DMA_Abort_IT+0x84>
 8000b32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b36:	e00e      	b.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b3c:	e00b      	b.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b42:	e008      	b.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b48:	e005      	b.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4e:	e002      	b.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b50:	2310      	movs	r3, #16
 8000b52:	e000      	b.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b54:	2301      	movs	r3, #1
 8000b56:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <HAL_DMA_Abort_IT+0xe8>)
 8000b58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	4798      	blx	r3
    } 
  }
  return status;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020008 	.word	0x40020008
 8000b88:	4002001c 	.word	0x4002001c
 8000b8c:	40020030 	.word	0x40020030
 8000b90:	40020044 	.word	0x40020044
 8000b94:	40020058 	.word	0x40020058
 8000b98:	4002006c 	.word	0x4002006c
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e169      	b.n	8000ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8158 	bne.w	8000e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	4a9a      	ldr	r2, [pc, #616]	; (8000e58 <HAL_GPIO_Init+0x2a0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d05e      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a98      	ldr	r2, [pc, #608]	; (8000e58 <HAL_GPIO_Init+0x2a0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d875      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000bfa:	4a98      	ldr	r2, [pc, #608]	; (8000e5c <HAL_GPIO_Init+0x2a4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d058      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c00:	4a96      	ldr	r2, [pc, #600]	; (8000e5c <HAL_GPIO_Init+0x2a4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d86f      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c06:	4a96      	ldr	r2, [pc, #600]	; (8000e60 <HAL_GPIO_Init+0x2a8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d052      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c0c:	4a94      	ldr	r2, [pc, #592]	; (8000e60 <HAL_GPIO_Init+0x2a8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d869      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c12:	4a94      	ldr	r2, [pc, #592]	; (8000e64 <HAL_GPIO_Init+0x2ac>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d04c      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c18:	4a92      	ldr	r2, [pc, #584]	; (8000e64 <HAL_GPIO_Init+0x2ac>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d863      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c1e:	4a92      	ldr	r2, [pc, #584]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d046      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
 8000c24:	4a90      	ldr	r2, [pc, #576]	; (8000e68 <HAL_GPIO_Init+0x2b0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d85d      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c2a:	2b12      	cmp	r3, #18
 8000c2c:	d82a      	bhi.n	8000c84 <HAL_GPIO_Init+0xcc>
 8000c2e:	2b12      	cmp	r3, #18
 8000c30:	d859      	bhi.n	8000ce6 <HAL_GPIO_Init+0x12e>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <HAL_GPIO_Init+0x80>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000cb3 	.word	0x08000cb3
 8000c3c:	08000c8d 	.word	0x08000c8d
 8000c40:	08000c9f 	.word	0x08000c9f
 8000c44:	08000ce1 	.word	0x08000ce1
 8000c48:	08000ce7 	.word	0x08000ce7
 8000c4c:	08000ce7 	.word	0x08000ce7
 8000c50:	08000ce7 	.word	0x08000ce7
 8000c54:	08000ce7 	.word	0x08000ce7
 8000c58:	08000ce7 	.word	0x08000ce7
 8000c5c:	08000ce7 	.word	0x08000ce7
 8000c60:	08000ce7 	.word	0x08000ce7
 8000c64:	08000ce7 	.word	0x08000ce7
 8000c68:	08000ce7 	.word	0x08000ce7
 8000c6c:	08000ce7 	.word	0x08000ce7
 8000c70:	08000ce7 	.word	0x08000ce7
 8000c74:	08000ce7 	.word	0x08000ce7
 8000c78:	08000ce7 	.word	0x08000ce7
 8000c7c:	08000c95 	.word	0x08000c95
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	4a79      	ldr	r2, [pc, #484]	; (8000e6c <HAL_GPIO_Init+0x2b4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c8a:	e02c      	b.n	8000ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e029      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e024      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e01f      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	330c      	adds	r3, #12
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e01a      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d102      	bne.n	8000cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e013      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d105      	bne.n	8000cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	611a      	str	r2, [r3, #16]
          break;
 8000cd2:	e009      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	615a      	str	r2, [r3, #20]
          break;
 8000cde:	e003      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x130>
          break;
 8000ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	2bff      	cmp	r3, #255	; 0xff
 8000cec:	d801      	bhi.n	8000cf2 <HAL_GPIO_Init+0x13a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	e001      	b.n	8000cf6 <HAL_GPIO_Init+0x13e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	2bff      	cmp	r3, #255	; 0xff
 8000cfc:	d802      	bhi.n	8000d04 <HAL_GPIO_Init+0x14c>
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x152>
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	3b08      	subs	r3, #8
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	210f      	movs	r1, #15
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	6a39      	ldr	r1, [r7, #32]
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	431a      	orrs	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d38:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <HAL_GPIO_Init+0x2b8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d50:	4a48      	ldr	r2, [pc, #288]	; (8000e74 <HAL_GPIO_Init+0x2bc>)
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a40      	ldr	r2, [pc, #256]	; (8000e78 <HAL_GPIO_Init+0x2c0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d013      	beq.n	8000da4 <HAL_GPIO_Init+0x1ec>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a3f      	ldr	r2, [pc, #252]	; (8000e7c <HAL_GPIO_Init+0x2c4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00d      	beq.n	8000da0 <HAL_GPIO_Init+0x1e8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <HAL_GPIO_Init+0x2c8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x1e4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3d      	ldr	r2, [pc, #244]	; (8000e84 <HAL_GPIO_Init+0x2cc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d101      	bne.n	8000d98 <HAL_GPIO_Init+0x1e0>
 8000d94:	2303      	movs	r3, #3
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x1ee>
 8000da4:	2300      	movs	r3, #0
 8000da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db6:	492f      	ldr	r1, [pc, #188]	; (8000e74 <HAL_GPIO_Init+0x2bc>)
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	492c      	ldr	r1, [pc, #176]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4928      	ldr	r1, [pc, #160]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	4922      	ldr	r1, [pc, #136]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	491e      	ldr	r1, [pc, #120]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	4918      	ldr	r1, [pc, #96]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	608b      	str	r3, [r1, #8]
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4914      	ldr	r1, [pc, #80]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d021      	beq.n	8000e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	490e      	ldr	r1, [pc, #56]	; (8000e88 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60cb      	str	r3, [r1, #12]
 8000e54:	e021      	b.n	8000e9a <HAL_GPIO_Init+0x2e2>
 8000e56:	bf00      	nop
 8000e58:	10320000 	.word	0x10320000
 8000e5c:	10310000 	.word	0x10310000
 8000e60:	10220000 	.word	0x10220000
 8000e64:	10210000 	.word	0x10210000
 8000e68:	10120000 	.word	0x10120000
 8000e6c:	10110000 	.word	0x10110000
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	40010c00 	.word	0x40010c00
 8000e80:	40011000 	.word	0x40011000
 8000e84:	40011400 	.word	0x40011400
 8000e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	4909      	ldr	r1, [pc, #36]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f47f ae8e 	bne.w	8000bcc <HAL_GPIO_Init+0x14>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	372c      	adds	r7, #44	; 0x2c
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000edc:	e003      	b.n	8000ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	611a      	str	r2, [r3, #16]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f806 	bl	8000f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e12b      	b.n	800119e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d106      	bne.n	8000f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fa7e 	bl	800045c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2224      	movs	r2, #36	; 0x24
 8000f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f98:	f002 fc72 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8000f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4a81      	ldr	r2, [pc, #516]	; (80011a8 <HAL_I2C_Init+0x274>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d807      	bhi.n	8000fb8 <HAL_I2C_Init+0x84>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a80      	ldr	r2, [pc, #512]	; (80011ac <HAL_I2C_Init+0x278>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	bf94      	ite	ls
 8000fb0:	2301      	movls	r3, #1
 8000fb2:	2300      	movhi	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e006      	b.n	8000fc6 <HAL_I2C_Init+0x92>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4a7d      	ldr	r2, [pc, #500]	; (80011b0 <HAL_I2C_Init+0x27c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	bf94      	ite	ls
 8000fc0:	2301      	movls	r3, #1
 8000fc2:	2300      	movhi	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0e7      	b.n	800119e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4a78      	ldr	r2, [pc, #480]	; (80011b4 <HAL_I2C_Init+0x280>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	0c9b      	lsrs	r3, r3, #18
 8000fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a6a      	ldr	r2, [pc, #424]	; (80011a8 <HAL_I2C_Init+0x274>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d802      	bhi.n	8001008 <HAL_I2C_Init+0xd4>
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	3301      	adds	r3, #1
 8001006:	e009      	b.n	800101c <HAL_I2C_Init+0xe8>
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	4a69      	ldr	r2, [pc, #420]	; (80011b8 <HAL_I2C_Init+0x284>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	099b      	lsrs	r3, r3, #6
 800101a:	3301      	adds	r3, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	430b      	orrs	r3, r1
 8001022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800102e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	495c      	ldr	r1, [pc, #368]	; (80011a8 <HAL_I2C_Init+0x274>)
 8001038:	428b      	cmp	r3, r1
 800103a:	d819      	bhi.n	8001070 <HAL_I2C_Init+0x13c>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1e59      	subs	r1, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fbb1 f3f3 	udiv	r3, r1, r3
 800104a:	1c59      	adds	r1, r3, #1
 800104c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001050:	400b      	ands	r3, r1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00a      	beq.n	800106c <HAL_I2C_Init+0x138>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1e59      	subs	r1, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fbb1 f3f3 	udiv	r3, r1, r3
 8001064:	3301      	adds	r3, #1
 8001066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106a:	e051      	b.n	8001110 <HAL_I2C_Init+0x1dc>
 800106c:	2304      	movs	r3, #4
 800106e:	e04f      	b.n	8001110 <HAL_I2C_Init+0x1dc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d111      	bne.n	800109c <HAL_I2C_Init+0x168>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1e58      	subs	r0, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6859      	ldr	r1, [r3, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	440b      	add	r3, r1
 8001086:	fbb0 f3f3 	udiv	r3, r0, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf0c      	ite	eq
 8001094:	2301      	moveq	r3, #1
 8001096:	2300      	movne	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	e012      	b.n	80010c2 <HAL_I2C_Init+0x18e>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1e58      	subs	r0, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6859      	ldr	r1, [r3, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	0099      	lsls	r1, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_I2C_Init+0x196>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e022      	b.n	8001110 <HAL_I2C_Init+0x1dc>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10e      	bne.n	80010f0 <HAL_I2C_Init+0x1bc>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1e58      	subs	r0, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6859      	ldr	r1, [r3, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	440b      	add	r3, r1
 80010e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ee:	e00f      	b.n	8001110 <HAL_I2C_Init+0x1dc>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	1e58      	subs	r0, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6859      	ldr	r1, [r3, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	0099      	lsls	r1, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	fbb0 f3f3 	udiv	r3, r0, r3
 8001106:	3301      	adds	r3, #1
 8001108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	6809      	ldr	r1, [r1, #0]
 8001114:	4313      	orrs	r3, r2
 8001116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69da      	ldr	r2, [r3, #28]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800113e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6911      	ldr	r1, [r2, #16]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68d2      	ldr	r2, [r2, #12]
 800114a:	4311      	orrs	r1, r2
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	430b      	orrs	r3, r1
 8001152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2220      	movs	r2, #32
 800118a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	000186a0 	.word	0x000186a0
 80011ac:	001e847f 	.word	0x001e847f
 80011b0:	003d08ff 	.word	0x003d08ff
 80011b4:	431bde83 	.word	0x431bde83
 80011b8:	10624dd3 	.word	0x10624dd3

080011bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	461a      	mov	r2, r3
 80011c8:	460b      	mov	r3, r1
 80011ca:	817b      	strh	r3, [r7, #10]
 80011cc:	4613      	mov	r3, r2
 80011ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff fb58 	bl	8000884 <HAL_GetTick>
 80011d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b20      	cmp	r3, #32
 80011e0:	f040 80e0 	bne.w	80013a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2319      	movs	r3, #25
 80011ea:	2201      	movs	r2, #1
 80011ec:	4970      	ldr	r1, [pc, #448]	; (80013b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f001 fda0 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011fa:	2302      	movs	r3, #2
 80011fc:	e0d3      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_I2C_Master_Transmit+0x50>
 8001208:	2302      	movs	r3, #2
 800120a:	e0cc      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1ea>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b01      	cmp	r3, #1
 8001220:	d007      	beq.n	8001232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0201 	orr.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2221      	movs	r2, #33	; 0x21
 8001246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2210      	movs	r2, #16
 800124e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	893a      	ldrh	r2, [r7, #8]
 8001262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001268:	b29a      	uxth	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001274:	8979      	ldrh	r1, [r7, #10]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	6a3a      	ldr	r2, [r7, #32]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f001 fc30 	bl	8002ae0 <I2C_MasterRequestWrite>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e08d      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012a0:	e066      	b.n	8001370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	6a39      	ldr	r1, [r7, #32]
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f001 fe1a 	bl	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00d      	beq.n	80012ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d107      	bne.n	80012ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e06b      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b04      	cmp	r3, #4
 800130a:	d11b      	bne.n	8001344 <HAL_I2C_Master_Transmit+0x188>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132e:	b29b      	uxth	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133c:	3b01      	subs	r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	6a39      	ldr	r1, [r7, #32]
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f001 fe0a 	bl	8002f62 <I2C_WaitOnBTFFlagUntilTimeout>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00d      	beq.n	8001370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	2b04      	cmp	r3, #4
 800135a:	d107      	bne.n	800136c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800136a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e01a      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	d194      	bne.n	80012a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2220      	movs	r2, #32
 800138c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e000      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013a4:	2302      	movs	r3, #2
  }
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	00100002 	.word	0x00100002
 80013b4:	ffff0000 	.word	0xffff0000

080013b8 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	461a      	mov	r2, r3
 80013c4:	460b      	mov	r3, r1
 80013c6:	817b      	strh	r3, [r7, #10]
 80013c8:	4613      	mov	r3, r2
 80013ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b20      	cmp	r3, #32
 80013de:	f040 80a6 	bne.w	800152e <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f0:	d005      	beq.n	80013fe <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d002      	beq.n	80013fe <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d130      	bne.n	8001460 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80013fe:	4b4f      	ldr	r3, [pc, #316]	; (800153c <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0a1a      	lsrs	r2, r3, #8
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009a      	lsls	r2, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	3b01      	subs	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d116      	bne.n	8001452 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2220      	movs	r2, #32
 800142e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f043 0220 	orr.w	r2, r3, #32
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06e      	b.n	8001530 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b02      	cmp	r3, #2
 800145e:	d0db      	beq.n	8001418 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800146a:	2302      	movs	r3, #2
 800146c:	e060      	b.n	8001530 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d007      	beq.n	8001494 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2221      	movs	r2, #33	; 0x21
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2210      	movs	r2, #16
 80014b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	893a      	ldrh	r2, [r7, #8]
 80014c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80014d6:	897a      	ldrh	r2, [r7, #10]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b11      	cmp	r3, #17
 80014e6:	d10c      	bne.n	8001502 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80014ee:	d003      	beq.n	80014f8 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80014f6:	d101      	bne.n	80014fc <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 80014fc:	2300      	movs	r3, #0
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001510:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001528:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800152e:	2302      	movs	r3, #2
  }
}
 8001530:	4618      	mov	r0, r3
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000080 	.word	0x20000080
 8001540:	14f8b589 	.word	0x14f8b589

08001544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001564:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b10      	cmp	r3, #16
 8001572:	d003      	beq.n	800157c <HAL_I2C_EV_IRQHandler+0x38>
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	f040 80c1 	bne.w	80016fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800159c:	d003      	beq.n	80015a6 <HAL_I2C_EV_IRQHandler+0x62>
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80015a4:	d101      	bne.n	80015aa <HAL_I2C_EV_IRQHandler+0x66>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_I2C_EV_IRQHandler+0x68>
 80015aa:	2300      	movs	r3, #0
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	f000 8132 	beq.w	8001816 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <HAL_I2C_EV_IRQHandler+0x92>
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	0a5b      	lsrs	r3, r3, #9
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f001 fd6b 	bl	80030a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fcd5 	bl	8001f7e <I2C_Master_SB>
 80015d4:	e092      	b.n	80016fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	0a5b      	lsrs	r3, r3, #9
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fd4a 	bl	8002088 <I2C_Master_ADD10>
 80015f4:	e082      	b.n	80016fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <HAL_I2C_EV_IRQHandler+0xd2>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	0a5b      	lsrs	r3, r3, #9
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fd63 	bl	80020da <I2C_Master_ADDR>
 8001614:	e072      	b.n	80016fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d03b      	beq.n	800169a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800162c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001630:	f000 80f3 	beq.w	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	09db      	lsrs	r3, r3, #7
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00f      	beq.n	8001660 <HAL_I2C_EV_IRQHandler+0x11c>
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	0a9b      	lsrs	r3, r3, #10
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_I2C_EV_IRQHandler+0x11c>
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d103      	bne.n	8001660 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f94f 	bl	80018fc <I2C_MasterTransmit_TXE>
 800165e:	e04d      	b.n	80016fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80d6 	beq.w	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	0a5b      	lsrs	r3, r3, #9
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80cf 	beq.w	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	2b21      	cmp	r3, #33	; 0x21
 8001680:	d103      	bne.n	800168a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f9d6 	bl	8001a34 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001688:	e0c7      	b.n	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	2b40      	cmp	r3, #64	; 0x40
 800168e:	f040 80c4 	bne.w	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fa44 	bl	8001b20 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001698:	e0bf      	b.n	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a8:	f000 80b7 	beq.w	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	099b      	lsrs	r3, r3, #6
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00f      	beq.n	80016d8 <HAL_I2C_EV_IRQHandler+0x194>
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	0a9b      	lsrs	r3, r3, #10
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <HAL_I2C_EV_IRQHandler+0x194>
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d103      	bne.n	80016d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fab9 	bl	8001c48 <I2C_MasterReceive_RXNE>
 80016d6:	e011      	b.n	80016fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 809a 	beq.w	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	0a5b      	lsrs	r3, r3, #9
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8093 	beq.w	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fb58 	bl	8001daa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016fa:	e08e      	b.n	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
 80016fc:	e08d      	b.n	800181a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e007      	b.n	8001720 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d012      	beq.n	8001752 <HAL_I2C_EV_IRQHandler+0x20e>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	0a5b      	lsrs	r3, r3, #9
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00c      	beq.n	8001752 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001748:	69b9      	ldr	r1, [r7, #24]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 ff1c 	bl	8002588 <I2C_Slave_ADDR>
 8001750:	e066      	b.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_I2C_EV_IRQHandler+0x22e>
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	0a5b      	lsrs	r3, r3, #9
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 ff56 	bl	800261c <I2C_Slave_STOPF>
 8001770:	e056      	b.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	2b21      	cmp	r3, #33	; 0x21
 8001776:	d002      	beq.n	800177e <HAL_I2C_EV_IRQHandler+0x23a>
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	2b29      	cmp	r3, #41	; 0x29
 800177c:	d125      	bne.n	80017ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	09db      	lsrs	r3, r3, #7
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00f      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x266>
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	0a9b      	lsrs	r3, r3, #10
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x266>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fe34 	bl	8002410 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017a8:	e039      	b.n	800181e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d033      	beq.n	800181e <HAL_I2C_EV_IRQHandler+0x2da>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	0a5b      	lsrs	r3, r3, #9
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d02d      	beq.n	800181e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fe61 	bl	800248a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017c8:	e029      	b.n	800181e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00f      	beq.n	80017f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	0a9b      	lsrs	r3, r3, #10
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d103      	bne.n	80017f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 fe6b 	bl	80024ca <I2C_SlaveReceive_RXNE>
 80017f4:	e014      	b.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00e      	beq.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	0a5b      	lsrs	r3, r3, #9
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fe99 	bl	8002546 <I2C_SlaveReceive_BTF>
 8001814:	e004      	b.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001816:	bf00      	nop
 8001818:	e002      	b.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800181a:	bf00      	nop
 800181c:	e000      	b.n	8001820 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800181e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	70fb      	strb	r3, [r7, #3]
 800187a:	4613      	mov	r3, r2
 800187c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001912:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	2b00      	cmp	r3, #0
 8001920:	d150      	bne.n	80019c4 <I2C_MasterTransmit_TXE+0xc8>
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2b21      	cmp	r3, #33	; 0x21
 8001926:	d14d      	bne.n	80019c4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b08      	cmp	r3, #8
 800192c:	d01d      	beq.n	800196a <I2C_MasterTransmit_TXE+0x6e>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b20      	cmp	r3, #32
 8001932:	d01a      	beq.n	800196a <I2C_MasterTransmit_TXE+0x6e>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800193a:	d016      	beq.n	800196a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800194a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2211      	movs	r2, #17
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff5f 	bl	8001826 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001968:	e060      	b.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001978:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001988:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b40      	cmp	r3, #64	; 0x40
 80019a2:	d107      	bne.n	80019b4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff74 	bl	800189a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019b2:	e03b      	b.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff32 	bl	8001826 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019c2:	e033      	b.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b21      	cmp	r3, #33	; 0x21
 80019c8:	d005      	beq.n	80019d6 <I2C_MasterTransmit_TXE+0xda>
 80019ca:	7bbb      	ldrb	r3, [r7, #14]
 80019cc:	2b40      	cmp	r3, #64	; 0x40
 80019ce:	d12d      	bne.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b22      	cmp	r3, #34	; 0x22
 80019d4:	d12a      	bne.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d108      	bne.n	80019f2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80019f0:	e01c      	b.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b40      	cmp	r3, #64	; 0x40
 80019fc:	d103      	bne.n	8001a06 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f88e 	bl	8001b20 <I2C_MemoryTransmit_TXE_BTF>
}
 8001a04:	e012      	b.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a2a:	e7ff      	b.n	8001a2c <I2C_MasterTransmit_TXE+0x130>
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b21      	cmp	r3, #33	; 0x21
 8001a4c:	d164      	bne.n	8001b18 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d012      	beq.n	8001a7e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001a7c:	e04c      	b.n	8001b18 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d01d      	beq.n	8001ac0 <I2C_MasterTransmit_BTF+0x8c>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d01a      	beq.n	8001ac0 <I2C_MasterTransmit_BTF+0x8c>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a90:	d016      	beq.n	8001ac0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001aa0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2211      	movs	r2, #17
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff feb4 	bl	8001826 <HAL_I2C_MasterTxCpltCallback>
}
 8001abe:	e02b      	b.n	8001b18 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ace:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ade:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b40      	cmp	r3, #64	; 0x40
 8001af8:	d107      	bne.n	8001b0a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fec9 	bl	800189a <HAL_I2C_MemTxCpltCallback>
}
 8001b08:	e006      	b.n	8001b18 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fe87 	bl	8001826 <HAL_I2C_MasterTxCpltCallback>
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11d      	bne.n	8001b74 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10b      	bne.n	8001b58 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b50:	1c9a      	adds	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001b56:	e073      	b.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	121b      	asrs	r3, r3, #8
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b72:	e065      	b.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10b      	bne.n	8001b94 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b92:	e055      	b.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d151      	bne.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b22      	cmp	r3, #34	; 0x22
 8001ba0:	d10d      	bne.n	8001bbe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bb0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bbc:	e040      	b.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d015      	beq.n	8001bf4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	2b21      	cmp	r3, #33	; 0x21
 8001bcc:	d112      	bne.n	8001bf4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001bf2:	e025      	b.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d120      	bne.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b21      	cmp	r3, #33	; 0x21
 8001c02:	d11d      	bne.n	8001c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c12:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe2d 	bl	800189a <HAL_I2C_MemTxCpltCallback>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b22      	cmp	r3, #34	; 0x22
 8001c5a:	f040 80a2 	bne.w	8001da2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d921      	bls.n	8001cb0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	f040 8082 	bne.w	8001da2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001cae:	e078      	b.n	8001da2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d074      	beq.n	8001da2 <I2C_MasterReceive_RXNE+0x15a>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d002      	beq.n	8001cc4 <I2C_MasterReceive_RXNE+0x7c>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d16e      	bne.n	8001da2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 f98d 	bl	8002fe4 <I2C_WaitOnSTOPRequestThroughIT>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d142      	bne.n	8001d56 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cde:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d10a      	bne.n	8001d40 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fdb7 	bl	80018ac <HAL_I2C_MemRxCpltCallback>
}
 8001d3e:	e030      	b.n	8001da2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2212      	movs	r2, #18
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fd72 	bl	8001838 <HAL_I2C_MasterRxCpltCallback>
}
 8001d54:	e025      	b.n	8001da2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fd8e 	bl	80018be <HAL_I2C_ErrorCallback>
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d11b      	bne.n	8001dfa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001df8:	e0bd      	b.n	8001f76 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d129      	bne.n	8001e58 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e12:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00a      	beq.n	8001e30 <I2C_MasterReceive_BTF+0x86>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d007      	beq.n	8001e30 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e56:	e08e      	b.n	8001f76 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d176      	bne.n	8001f50 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d002      	beq.n	8001e6e <I2C_MasterReceive_BTF+0xc4>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d108      	bne.n	8001e80 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e019      	b.n	8001eb4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d002      	beq.n	8001e8c <I2C_MasterReceive_BTF+0xe2>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d108      	bne.n	8001e9e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e00a      	b.n	8001eb4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d007      	beq.n	8001eb4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f0e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d10a      	bne.n	8001f3a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fcba 	bl	80018ac <HAL_I2C_MemRxCpltCallback>
}
 8001f38:	e01d      	b.n	8001f76 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2212      	movs	r2, #18
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fc75 	bl	8001838 <HAL_I2C_MasterRxCpltCallback>
}
 8001f4e:	e012      	b.n	8001f76 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	d117      	bne.n	8001fc2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001faa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001fac:	e067      	b.n	800207e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	611a      	str	r2, [r3, #16]
}
 8001fc0:	e05d      	b.n	800207e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fca:	d133      	bne.n	8002034 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b21      	cmp	r3, #33	; 0x21
 8001fd6:	d109      	bne.n	8001fec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e008      	b.n	8001ffe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <I2C_Master_SB+0x92>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	2b00      	cmp	r3, #0
 8002016:	d032      	beq.n	800207e <I2C_Master_SB+0x100>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d02d      	beq.n	800207e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002030:	605a      	str	r2, [r3, #4]
}
 8002032:	e024      	b.n	800207e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10e      	bne.n	800205a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	b29b      	uxth	r3, r3
 8002042:	11db      	asrs	r3, r3, #7
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 0306 	and.w	r3, r3, #6
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f063 030f 	orn	r3, r3, #15
 8002050:	b2da      	uxtb	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	611a      	str	r2, [r3, #16]
}
 8002058:	e011      	b.n	800207e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10d      	bne.n	800207e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	b29b      	uxth	r3, r3
 8002068:	11db      	asrs	r3, r3, #7
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f003 0306 	and.w	r3, r3, #6
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f063 030e 	orn	r3, r3, #14
 8002076:	b2da      	uxtb	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	b2da      	uxtb	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <I2C_Master_ADD10+0x26>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <I2C_Master_ADD10+0x48>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ce:	605a      	str	r2, [r3, #4]
  }
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80020da:	b480      	push	{r7}
 80020dc:	b091      	sub	sp, #68	; 0x44
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b22      	cmp	r3, #34	; 0x22
 8002102:	f040 8174 	bne.w	80023ee <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <I2C_Master_ADDR+0x54>
 800210e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d10b      	bne.n	800212e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	e16b      	b.n	8002406 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11d      	bne.n	8002172 <I2C_Master_ADDR+0x98>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800213e:	d118      	bne.n	8002172 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002164:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	651a      	str	r2, [r3, #80]	; 0x50
 8002170:	e149      	b.n	8002406 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d113      	bne.n	80021a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e120      	b.n	80023e6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 808a 	bne.w	80022c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b6:	d137      	bne.n	8002228 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d6:	d113      	bne.n	8002200 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	e0f2      	b.n	80023e6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	623b      	str	r3, [r7, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	623b      	str	r3, [r7, #32]
 8002214:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e0de      	b.n	80023e6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	2b08      	cmp	r3, #8
 800222c:	d02e      	beq.n	800228c <I2C_Master_ADDR+0x1b2>
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002230:	2b20      	cmp	r3, #32
 8002232:	d02b      	beq.n	800228c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	2b12      	cmp	r3, #18
 8002238:	d102      	bne.n	8002240 <I2C_Master_ADDR+0x166>
 800223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223c:	2b01      	cmp	r3, #1
 800223e:	d125      	bne.n	800228c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	2b04      	cmp	r3, #4
 8002244:	d00e      	beq.n	8002264 <I2C_Master_ADDR+0x18a>
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	2b02      	cmp	r3, #2
 800224a:	d00b      	beq.n	8002264 <I2C_Master_ADDR+0x18a>
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	2b10      	cmp	r3, #16
 8002250:	d008      	beq.n	8002264 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e007      	b.n	8002274 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002272:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	e0ac      	b.n	80023e6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e090      	b.n	80023e6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d158      	bne.n	8002380 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d021      	beq.n	8002318 <I2C_Master_ADDR+0x23e>
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d01e      	beq.n	8002318 <I2C_Master_ADDR+0x23e>
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d01b      	beq.n	8002318 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e012      	b.n	800233e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002326:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234c:	d14b      	bne.n	80023e6 <I2C_Master_ADDR+0x30c>
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002354:	d00b      	beq.n	800236e <I2C_Master_ADDR+0x294>
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	2b01      	cmp	r3, #1
 800235a:	d008      	beq.n	800236e <I2C_Master_ADDR+0x294>
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	2b08      	cmp	r3, #8
 8002360:	d005      	beq.n	800236e <I2C_Master_ADDR+0x294>
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	2b10      	cmp	r3, #16
 8002366:	d002      	beq.n	800236e <I2C_Master_ADDR+0x294>
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	2b20      	cmp	r3, #32
 800236c:	d13b      	bne.n	80023e6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	e032      	b.n	80023e6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800238e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800239e:	d117      	bne.n	80023d0 <I2C_Master_ADDR+0x2f6>
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a6:	d00b      	beq.n	80023c0 <I2C_Master_ADDR+0x2e6>
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d008      	beq.n	80023c0 <I2C_Master_ADDR+0x2e6>
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d005      	beq.n	80023c0 <I2C_Master_ADDR+0x2e6>
 80023b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d002      	beq.n	80023c0 <I2C_Master_ADDR+0x2e6>
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d107      	bne.n	80023d0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80023ec:	e00b      	b.n	8002406 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
}
 8002404:	e7ff      	b.n	8002406 <I2C_Master_ADDR+0x32c>
 8002406:	bf00      	nop
 8002408:	3744      	adds	r7, #68	; 0x44
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d02b      	beq.n	8002482 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d114      	bne.n	8002482 <I2C_SlaveTransmit_TXE+0x72>
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b29      	cmp	r3, #41	; 0x29
 800245c:	d111      	bne.n	8002482 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2221      	movs	r2, #33	; 0x21
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2228      	movs	r2, #40	; 0x28
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff f9e4 	bl	800184a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d011      	beq.n	80024c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02c      	beq.n	800253e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d114      	bne.n	800253e <I2C_SlaveReceive_RXNE+0x74>
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b2a      	cmp	r3, #42	; 0x2a
 8002518:	d111      	bne.n	800253e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002528:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2222      	movs	r2, #34	; 0x22
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2228      	movs	r2, #40	; 0x28
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff f98f 	bl	800185c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d012      	beq.n	800257e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025a2:	2b28      	cmp	r3, #40	; 0x28
 80025a4:	d127      	bne.n	80025f6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	09db      	lsrs	r3, r3, #7
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	81bb      	strh	r3, [r7, #12]
 80025d8:	e002      	b.n	80025e0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80025e8:	89ba      	ldrh	r2, [r7, #12]
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff f93d 	bl	800186e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80025f4:	e00e      	b.n	8002614 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800263a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002668:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002678:	d172      	bne.n	8002760 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b22      	cmp	r3, #34	; 0x22
 800267e:	d002      	beq.n	8002686 <I2C_Slave_STOPF+0x6a>
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b2a      	cmp	r3, #42	; 0x2a
 8002684:	d135      	bne.n	80026f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0204 	orr.w	r2, r3, #4
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fa6e 	bl	8000ba0 <HAL_DMA_GetState>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d049      	beq.n	800275e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	4a69      	ldr	r2, [pc, #420]	; (8002874 <I2C_Slave_STOPF+0x258>)
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f9ec 	bl	8000ab4 <HAL_DMA_Abort_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03d      	beq.n	800275e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026ec:	4610      	mov	r0, r2
 80026ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026f0:	e035      	b.n	800275e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f043 0204 	orr.w	r2, r3, #4
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002724:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fa38 	bl	8000ba0 <HAL_DMA_GetState>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d014      	beq.n	8002760 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273a:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <I2C_Slave_STOPF+0x258>)
 800273c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f9b6 	bl	8000ab4 <HAL_DMA_Abort_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002758:	4610      	mov	r0, r2
 800275a:	4798      	blx	r3
 800275c:	e000      	b.n	8002760 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800275e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03e      	beq.n	80027e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b04      	cmp	r3, #4
 8002776:	d112      	bne.n	800279e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d112      	bne.n	80027d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f843 	bl	800287c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80027f6:	e039      	b.n	800286c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b2a      	cmp	r3, #42	; 0x2a
 80027fc:	d109      	bne.n	8002812 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2228      	movs	r2, #40	; 0x28
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff f825 	bl	800185c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b28      	cmp	r3, #40	; 0x28
 800281c:	d111      	bne.n	8002842 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <I2C_Slave_STOPF+0x25c>)
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff f824 	bl	8001888 <HAL_I2C_ListenCpltCallback>
}
 8002840:	e014      	b.n	800286c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	2b22      	cmp	r3, #34	; 0x22
 8002848:	d002      	beq.n	8002850 <I2C_Slave_STOPF+0x234>
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b22      	cmp	r3, #34	; 0x22
 800284e:	d10d      	bne.n	800286c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fff8 	bl	800185c <HAL_I2C_SlaveRxCpltCallback>
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	08002be5 	.word	0x08002be5
 8002878:	ffff0000 	.word	0xffff0000

0800287c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d002      	beq.n	80028a0 <I2C_ITError+0x24>
 800289a:	7bbb      	ldrb	r3, [r7, #14]
 800289c:	2b40      	cmp	r3, #64	; 0x40
 800289e:	d10a      	bne.n	80028b6 <I2C_ITError+0x3a>
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b22      	cmp	r3, #34	; 0x22
 80028a4:	d107      	bne.n	80028b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028bc:	2b28      	cmp	r3, #40	; 0x28
 80028be:	d107      	bne.n	80028d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2228      	movs	r2, #40	; 0x28
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ce:	e015      	b.n	80028fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028de:	d00a      	beq.n	80028f6 <I2C_ITError+0x7a>
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b60      	cmp	r3, #96	; 0x60
 80028e4:	d007      	beq.n	80028f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290a:	d161      	bne.n	80029d0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002924:	2b01      	cmp	r3, #1
 8002926:	d020      	beq.n	800296a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	4a6a      	ldr	r2, [pc, #424]	; (8002ad8 <I2C_ITError+0x25c>)
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe f8bd 	bl	8000ab4 <HAL_DMA_Abort_IT>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8089 	beq.w	8002a54 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002964:	4610      	mov	r0, r2
 8002966:	4798      	blx	r3
 8002968:	e074      	b.n	8002a54 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4a5a      	ldr	r2, [pc, #360]	; (8002ad8 <I2C_ITError+0x25c>)
 8002970:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f89c 	bl	8000ab4 <HAL_DMA_Abort_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d068      	beq.n	8002a54 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d10b      	bne.n	80029a8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ca:	4610      	mov	r0, r2
 80029cc:	4798      	blx	r3
 80029ce:	e041      	b.n	8002a54 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b60      	cmp	r3, #96	; 0x60
 80029da:	d125      	bne.n	8002a28 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d10b      	bne.n	8002a10 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe ff55 	bl	80018d0 <HAL_I2C_AbortCpltCallback>
 8002a26:	e015      	b.n	8002a54 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d10b      	bne.n	8002a4e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe ff35 	bl	80018be <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10e      	bne.n	8002a82 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a90:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d113      	bne.n	8002ace <I2C_ITError+0x252>
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b28      	cmp	r3, #40	; 0x28
 8002aaa:	d110      	bne.n	8002ace <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <I2C_ITError+0x260>)
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7fe fedd 	bl	8001888 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08002be5 	.word	0x08002be5
 8002adc:	ffff0000 	.word	0xffff0000

08002ae0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	460b      	mov	r3, r1
 8002aee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d006      	beq.n	8002b0a <I2C_MasterRequestWrite+0x2a>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d003      	beq.n	8002b0a <I2C_MasterRequestWrite+0x2a>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b08:	d108      	bne.n	8002b1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e00b      	b.n	8002b34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	2b12      	cmp	r3, #18
 8002b22:	d107      	bne.n	8002b34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f8f7 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5a:	d103      	bne.n	8002b64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e035      	b.n	8002bd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b70:	d108      	bne.n	8002b84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	e01b      	b.n	8002bbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b84:	897b      	ldrh	r3, [r7, #10]
 8002b86:	11db      	asrs	r3, r3, #7
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0306 	and.w	r3, r3, #6
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f063 030f 	orn	r3, r3, #15
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <I2C_MasterRequestWrite+0xfc>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f91d 	bl	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e010      	b.n	8002bd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bb2:	897b      	ldrh	r3, [r7, #10]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <I2C_MasterRequestWrite+0x100>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f90d 	bl	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	00010008 	.word	0x00010008
 8002be0:	00010002 	.word	0x00010002

08002be4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <I2C_DMAAbort+0x148>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	08db      	lsrs	r3, r3, #3
 8002c04:	4a4a      	ldr	r2, [pc, #296]	; (8002d30 <I2C_DMAAbort+0x14c>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0a1a      	lsrs	r2, r3, #8
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00da      	lsls	r2, r3, #3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002c2a:	e00a      	b.n	8002c42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d0ea      	beq.n	8002c18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	2200      	movs	r2, #0
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	2200      	movs	r2, #0
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2200      	movs	r2, #0
 8002c96:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d10e      	bne.n	8002cd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7fe fe00 	bl	80018d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cd0:	e027      	b.n	8002d22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cd8:	2b28      	cmp	r3, #40	; 0x28
 8002cda:	d117      	bne.n	8002d0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2228      	movs	r2, #40	; 0x28
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d0a:	e007      	b.n	8002d1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002d1c:	6978      	ldr	r0, [r7, #20]
 8002d1e:	f7fe fdce 	bl	80018be <HAL_I2C_ErrorCallback>
}
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000080 	.word	0x20000080
 8002d30:	14f8b589 	.word	0x14f8b589

08002d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d44:	e025      	b.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d021      	beq.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fd fd99 	bl	8000884 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e023      	b.n	8002dda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10d      	bne.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4013      	ands	r3, r2
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	e00c      	b.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d0b6      	beq.n	8002d46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df0:	e051      	b.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e00:	d123      	bne.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0204 	orr.w	r2, r3, #4
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e046      	b.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d021      	beq.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e52:	f7fd fd17 	bl	8000884 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d302      	bcc.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d116      	bne.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f043 0220 	orr.w	r2, r3, #32
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e020      	b.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d10c      	bne.n	8002eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	e00b      	b.n	8002ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d18d      	bne.n	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eec:	e02d      	b.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f8aa 	bl	8003048 <I2C_IsAcknowledgeFailed>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e02d      	b.n	8002f5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d021      	beq.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7fd fcbd 	bl	8000884 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d116      	bne.n	8002f4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e007      	b.n	8002f5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d1ca      	bne.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6e:	e02d      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f869 	bl	8003048 <I2C_IsAcknowledgeFailed>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e02d      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d021      	beq.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f88:	f7fd fc7c 	bl	8000884 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e007      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d1ca      	bne.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	0a1a      	lsrs	r2, r3, #8
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b01      	subs	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e008      	b.n	8003034 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003030:	d0e9      	beq.n	8003006 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000080 	.word	0x20000080
 8003044:	14f8b589 	.word	0x14f8b589

08003048 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305e:	d11b      	bne.n	8003098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0204 	orr.w	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030b4:	d103      	bne.n	80030be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80030bc:	e007      	b.n	80030ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030c6:	d102      	bne.n	80030ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2208      	movs	r2, #8
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e272      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b92      	ldr	r3, [pc, #584]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00c      	beq.n	800311e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d112      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
 8003110:	4b8c      	ldr	r3, [pc, #560]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b89      	ldr	r3, [pc, #548]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x12c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e24c      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x76>
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7f      	ldr	r2, [pc, #508]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7a      	ldr	r2, [pc, #488]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b78      	ldr	r3, [pc, #480]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a77      	ldr	r2, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xbc>
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6e      	ldr	r2, [pc, #440]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003194:	4b6b      	ldr	r3, [pc, #428]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a67      	ldr	r2, [pc, #412]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fd fb66 	bl	8000884 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fd fb62 	bl	8000884 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e200      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe4>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fd fb52 	bl	8000884 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fd fb4e 	bl	8000884 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1ec      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x10c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800321e:	4b49      	ldr	r3, [pc, #292]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1c0      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4939      	ldr	r1, [pc, #228]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fd fb07 	bl	8000884 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fd fb03 	bl	8000884 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1a1      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4927      	ldr	r1, [pc, #156]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fae6 	bl	8000884 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fd fae2 	bl	8000884 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e180      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03a      	beq.n	800335c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f4:	f7fd fac6 	bl	8000884 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fd fac2 	bl	8000884 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e160      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f000 fad8 	bl	80038d0 <RCC_Delay>
 8003320:	e01c      	b.n	800335c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fd faac 	bl	8000884 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fd faa8 	bl	8000884 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d908      	bls.n	8003350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e146      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	42420000 	.word	0x42420000
 800334c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e9      	bne.n	8003330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a6 	beq.w	80034b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b8b      	ldr	r3, [pc, #556]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a87      	ldr	r2, [pc, #540]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b85      	ldr	r3, [pc, #532]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7e      	ldr	r2, [pc, #504]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fa69 	bl	8000884 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fd fa65 	bl	8000884 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e103      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x312>
 80033dc:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	e02d      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x334>
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a66      	ldr	r2, [pc, #408]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x356>
 8003414:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a60      	ldr	r2, [pc, #384]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a5d      	ldr	r2, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800342e:	4b5b      	ldr	r3, [pc, #364]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	4b58      	ldr	r3, [pc, #352]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a57      	ldr	r2, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fd fa19 	bl	8000884 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fa15 	bl	8000884 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0b1      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b4b      	ldr	r3, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x37e>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fd fa03 	bl	8000884 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fd f9ff 	bl	8000884 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e09b      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8087 	beq.w	80035ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c0:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d061      	beq.n	8003590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d146      	bne.n	8003562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fd f9d3 	bl	8000884 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fd f9cf 	bl	8000884 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e06d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f4:	4b29      	ldr	r3, [pc, #164]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4921      	ldr	r1, [pc, #132]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a19      	ldr	r1, [r3, #32]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	430b      	orrs	r3, r1
 800352e:	491b      	ldr	r1, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd f9a3 	bl	8000884 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7fd f99f 	bl	8000884 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e03d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x46a>
 8003560:	e035      	b.n	80035ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fd f98c 	bl	8000884 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd f988 	bl	8000884 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e026      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x498>
 800358e:	e01e      	b.n	80035ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e019      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x500>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000

080035dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0d0      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d910      	bls.n	8003620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	4965      	ldr	r1, [pc, #404]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0b8      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003642:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800365a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	494d      	ldr	r1, [pc, #308]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d040      	beq.n	80036fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d115      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e07f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e073      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06b      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4936      	ldr	r1, [pc, #216]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036cc:	f7fd f8da 	bl	8000884 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fd f8d6 	bl	8000884 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e053      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d210      	bcs.n	800372c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4922      	ldr	r1, [pc, #136]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e032      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4916      	ldr	r1, [pc, #88]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	490e      	ldr	r1, [pc, #56]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800376a:	f000 f821 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 800376e:	4602      	mov	r2, r0
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	490a      	ldr	r1, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x1c8>)
 800377c:	5ccb      	ldrb	r3, [r1, r3]
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1d0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd f838 	bl	8000800 <HAL_InitTick>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08005298 	.word	0x08005298
 80037a8:	20000080 	.word	0x20000080
 80037ac:	20000084 	.word	0x20000084

080037b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	b490      	push	{r4, r7}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_GetSysClockFreq+0xac>)
 80037b8:	1d3c      	adds	r4, r7, #4
 80037ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037c0:	f240 2301 	movw	r3, #513	; 0x201
 80037c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x40>
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x46>
 80037ee:	e02b      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037f2:	623b      	str	r3, [r7, #32]
      break;
 80037f4:	e02b      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	0c9b      	lsrs	r3, r3, #18
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3328      	adds	r3, #40	; 0x28
 8003800:	443b      	add	r3, r7
 8003802:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003806:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0c5b      	lsrs	r3, r3, #17
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	3328      	adds	r3, #40	; 0x28
 800381e:	443b      	add	r3, r7
 8003820:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003824:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb4>)
 800382a:	fb03 f202 	mul.w	r2, r3, r2
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	e004      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	623b      	str	r3, [r7, #32]
      break;
 8003846:	e002      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384a:	623b      	str	r3, [r7, #32]
      break;
 800384c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384e:	6a3b      	ldr	r3, [r7, #32]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3728      	adds	r7, #40	; 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc90      	pop	{r4, r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	08005224 	.word	0x08005224
 8003860:	40021000 	.word	0x40021000
 8003864:	007a1200 	.word	0x007a1200
 8003868:	003d0900 	.word	0x003d0900

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <HAL_RCC_GetHCLKFreq+0x10>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	20000080 	.word	0x20000080

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff2 	bl	800386c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	080052a8 	.word	0x080052a8

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff ffde 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0adb      	lsrs	r3, r3, #11
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	080052a8 	.word	0x080052a8

080038d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <RCC_Delay+0x34>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <RCC_Delay+0x38>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	0a5b      	lsrs	r3, r3, #9
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038ec:	bf00      	nop
  }
  while (Delay --);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	60fa      	str	r2, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f9      	bne.n	80038ec <RCC_Delay+0x1c>
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20000080 	.word	0x20000080
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e03f      	b.n	800399e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fc fdea 	bl	800050c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800394e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f829 	bl	80039a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039e2:	f023 030c 	bic.w	r3, r3, #12
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <UART_SetConfig+0x114>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7ff ff4a 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	e002      	b.n	8003a1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7ff ff32 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009a      	lsls	r2, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	0119      	lsls	r1, r3, #4
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009a      	lsls	r2, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a56:	fba3 0302 	umull	r0, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2064      	movs	r0, #100	; 0x64
 8003a5e:	fb00 f303 	mul.w	r3, r0, r3
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	3332      	adds	r3, #50	; 0x32
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	4419      	add	r1, r3
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009a      	lsls	r2, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <UART_SetConfig+0x118>)
 8003a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2064      	movs	r0, #100	; 0x64
 8003a96:	fb00 f303 	mul.w	r3, r0, r3
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	3332      	adds	r3, #50	; 0x32
 8003aa0:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <UART_SetConfig+0x118>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	f003 020f 	and.w	r2, r3, #15
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	51eb851f 	.word	0x51eb851f

08003ac4 <SSD1306_WriteCommand>:
 * Writes command to SSD1306
 * @param hssd: SSD1306 handle
 * @param data: command to be transmitted
 */
void SSD1306_WriteCommand(SSD1306_HandleTypeDef* hssd, uint8_t* data, uint8_t size)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	71fb      	strb	r3, [r7, #7]
	assert(hssd);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <SSD1306_WriteCommand+0x20>
 8003ad8:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <SSD1306_WriteCommand+0x6c>)
 8003ada:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <SSD1306_WriteCommand+0x70>)
 8003adc:	2111      	movs	r1, #17
 8003ade:	4816      	ldr	r0, [pc, #88]	; (8003b38 <SSD1306_WriteCommand+0x74>)
 8003ae0:	f000 fb62 	bl	80041a8 <__assert_func>

	/* Byte which signals that a command is being transmitted */
	uint8_t tBuf[2] = { WRITE_COMMAND };
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	82bb      	strh	r3, [r7, #20]

	for(uint8_t i = 0; i < size; i++) {
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75fb      	strb	r3, [r7, #23]
 8003aec:	e017      	b.n	8003b1e <SSD1306_WriteCommand+0x5a>
		memcpy(tBuf+1, data+i, 1);
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	3301      	adds	r3, #1
 8003af4:	7dfa      	ldrb	r2, [r7, #23]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	440a      	add	r2, r1
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(hssd->hi2c, hssd->devAddress, tBuf, 2, HAL_MAX_DELAY);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8819      	ldrh	r1, [r3, #0]
 8003b08:	f107 0214 	add.w	r2, r7, #20
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2302      	movs	r3, #2
 8003b14:	f7fd fb52 	bl	80011bc <HAL_I2C_Master_Transmit>
	for(uint8_t i = 0; i < size; i++) {
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
 8003b1e:	7dfa      	ldrb	r2, [r7, #23]
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d3e3      	bcc.n	8003aee <SSD1306_WriteCommand+0x2a>
	}
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	08005234 	.word	0x08005234
 8003b34:	080052b0 	.word	0x080052b0
 8003b38:	0800523c 	.word	0x0800523c

08003b3c <SSD1306_Display>:
/*
 * 	Writes Buffers content to Display,
 * 	Needs to be called so that Display's content is updated
 */
void SSD1306_Display(SSD1306_HandleTypeDef* hssd)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
	assert(hssd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <SSD1306_Display+0x1a>
 8003b4a:	4b3f      	ldr	r3, [pc, #252]	; (8003c48 <SSD1306_Display+0x10c>)
 8003b4c:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <SSD1306_Display+0x110>)
 8003b4e:	213a      	movs	r1, #58	; 0x3a
 8003b50:	483f      	ldr	r0, [pc, #252]	; (8003c50 <SSD1306_Display+0x114>)
 8003b52:	f000 fb29 	bl	80041a8 <__assert_func>
	assert(hssd->height);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <SSD1306_Display+0x30>
 8003b60:	4b3c      	ldr	r3, [pc, #240]	; (8003c54 <SSD1306_Display+0x118>)
 8003b62:	4a3a      	ldr	r2, [pc, #232]	; (8003c4c <SSD1306_Display+0x110>)
 8003b64:	213b      	movs	r1, #59	; 0x3b
 8003b66:	483a      	ldr	r0, [pc, #232]	; (8003c50 <SSD1306_Display+0x114>)
 8003b68:	f000 fb1e 	bl	80041a8 <__assert_func>
	assert(hssd->width);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d105      	bne.n	8003b82 <SSD1306_Display+0x46>
 8003b76:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <SSD1306_Display+0x11c>)
 8003b78:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <SSD1306_Display+0x110>)
 8003b7a:	213c      	movs	r1, #60	; 0x3c
 8003b7c:	4834      	ldr	r0, [pc, #208]	; (8003c50 <SSD1306_Display+0x114>)
 8003b7e:	f000 fb13 	bl	80041a8 <__assert_func>
	assert(hssd->hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <SSD1306_Display+0x5c>
 8003b8c:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <SSD1306_Display+0x120>)
 8003b8e:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <SSD1306_Display+0x110>)
 8003b90:	213d      	movs	r1, #61	; 0x3d
 8003b92:	482f      	ldr	r0, [pc, #188]	; (8003c50 <SSD1306_Display+0x114>)
 8003b94:	f000 fb08 	bl	80041a8 <__assert_func>

	/* Byte which signals that data will be Written or Read */
	uint8_t tBuf[] = { WRITE_READ_DATA };
 8003b98:	2340      	movs	r3, #64	; 0x40
 8003b9a:	733b      	strb	r3, [r7, #12]

	/* Transmit first byte that will indicate that data is being transmitted */
	HAL_I2C_Master_Seq_Transmit_IT(hssd->hi2c, hssd->devAddress, tBuf, 1, I2C_FIRST_FRAME);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8819      	ldrh	r1, [r3, #0]
 8003ba6:	f107 020c 	add.w	r2, r7, #12
 8003baa:	2301      	movs	r3, #1
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f7fd fc02 	bl	80013b8 <HAL_I2C_Master_Seq_Transmit_IT>
	/* POLL */
	while(HAL_I2C_GetState(hssd->hi2c) != HAL_I2C_STATE_READY);
 8003bb4:	bf00      	nop
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd fe90 	bl	80018e2 <HAL_I2C_GetState>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d1f6      	bne.n	8003bb6 <SSD1306_Display+0x7a>

	uint16_t i;
	for(i = 0; i < SSD1306_128_32_BUFFERSIZE - 1; i++) {
 8003bc8:	2300      	movs	r3, #0
 8003bca:	81fb      	strh	r3, [r7, #14]
 8003bcc:	e01a      	b.n	8003c04 <SSD1306_Display+0xc8>
		/* Transmit data */
		HAL_I2C_Master_Seq_Transmit_IT(hssd->hi2c, hssd->devAddress, hssd->buffer+i, 1, I2C_NEXT_FRAME);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8819      	ldrh	r1, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	89fb      	ldrh	r3, [r7, #14]
 8003bde:	441a      	add	r2, r3
 8003be0:	2304      	movs	r3, #4
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2301      	movs	r3, #1
 8003be6:	f7fd fbe7 	bl	80013b8 <HAL_I2C_Master_Seq_Transmit_IT>
		/* POLL */
		while(HAL_I2C_GetState(hssd->hi2c) != HAL_I2C_STATE_READY);
 8003bea:	bf00      	nop
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd fe75 	bl	80018e2 <HAL_I2C_GetState>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d1f6      	bne.n	8003bec <SSD1306_Display+0xb0>
	for(i = 0; i < SSD1306_128_32_BUFFERSIZE - 1; i++) {
 8003bfe:	89fb      	ldrh	r3, [r7, #14]
 8003c00:	3301      	adds	r3, #1
 8003c02:	81fb      	strh	r3, [r7, #14]
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8003c0a:	d9e0      	bls.n	8003bce <SSD1306_Display+0x92>
	}

	/* Transmit last data */
	HAL_I2C_Master_Seq_Transmit_IT(hssd->hi2c, hssd->devAddress, hssd->buffer+i, 1, I2C_LAST_FRAME);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8819      	ldrh	r1, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	1c9a      	adds	r2, r3, #2
 8003c1a:	89fb      	ldrh	r3, [r7, #14]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	2320      	movs	r3, #32
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2301      	movs	r3, #1
 8003c24:	f7fd fbc8 	bl	80013b8 <HAL_I2C_Master_Seq_Transmit_IT>
	/* POLL */
	while(HAL_I2C_GetState(hssd->hi2c) != HAL_I2C_STATE_READY);
 8003c28:	bf00      	nop
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fd fe56 	bl	80018e2 <HAL_I2C_GetState>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d1f6      	bne.n	8003c2a <SSD1306_Display+0xee>
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	08005234 	.word	0x08005234
 8003c4c:	080052c8 	.word	0x080052c8
 8003c50:	0800523c 	.word	0x0800523c
 8003c54:	08005258 	.word	0x08005258
 8003c58:	08005268 	.word	0x08005268
 8003c5c:	08005274 	.word	0x08005274

08003c60 <SSD1306_PutPixel>:
/*
 *	Places pixel into x and y coordinates,
 *	 SSD1306_Display function needs to be called to write buffer to OLED display
 */
void SSD1306_PutPixel(SSD1306_HandleTypeDef* hssd, uint16_t x, uint16_t y, uint8_t color)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	460b      	mov	r3, r1
 8003c74:	813b      	strh	r3, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	71fb      	strb	r3, [r7, #7]
	assert(hssd);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <SSD1306_PutPixel+0x2c>
 8003c80:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <SSD1306_PutPixel+0xc8>)
 8003c82:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <SSD1306_PutPixel+0xcc>)
 8003c84:	2170      	movs	r1, #112	; 0x70
 8003c86:	482a      	ldr	r0, [pc, #168]	; (8003d30 <SSD1306_PutPixel+0xd0>)
 8003c88:	f000 fa8e 	bl	80041a8 <__assert_func>

	/* Outside buffer dimensions */
	if((x < 0) || (x > SSD1306_128_32_WIDTH) || (y < 0) || (y > SSD1306_128_32_HEIGHT))
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d846      	bhi.n	8003d20 <SSD1306_PutPixel+0xc0>
 8003c92:	893b      	ldrh	r3, [r7, #8]
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d843      	bhi.n	8003d20 <SSD1306_PutPixel+0xc0>
		return;

	if(color == SSD1306_COLOR_BLACK) {
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11d      	bne.n	8003cda <SSD1306_PutPixel+0x7a>
		hssd->buffer[x + (y / 8) * SSD1306_128_32_WIDTH] |= (1 << (y & 7));
 8003c9e:	897a      	ldrh	r2, [r7, #10]
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	08db      	lsrs	r3, r3, #3
 8003ca4:	b298      	uxth	r0, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	01db      	lsls	r3, r3, #7
 8003caa:	4413      	add	r3, r2
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	789b      	ldrb	r3, [r3, #2]
 8003cb2:	b25a      	sxtb	r2, r3
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b259      	sxtb	r1, r3
 8003cc6:	897a      	ldrh	r2, [r7, #10]
 8003cc8:	4603      	mov	r3, r0
 8003cca:	01db      	lsls	r3, r3, #7
 8003ccc:	4413      	add	r3, r2
 8003cce:	b2c9      	uxtb	r1, r1
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	709a      	strb	r2, [r3, #2]
 8003cd8:	e023      	b.n	8003d22 <SSD1306_PutPixel+0xc2>
	}
	else if(color == SSD1306_COLOR_WHITE) {
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d120      	bne.n	8003d22 <SSD1306_PutPixel+0xc2>
		hssd->buffer[x + (y / 8) * SSD1306_128_32_WIDTH] &= ~(1 << (y & 7));
 8003ce0:	897a      	ldrh	r2, [r7, #10]
 8003ce2:	893b      	ldrh	r3, [r7, #8]
 8003ce4:	08db      	lsrs	r3, r3, #3
 8003ce6:	b298      	uxth	r0, r3
 8003ce8:	4603      	mov	r3, r0
 8003cea:	01db      	lsls	r3, r3, #7
 8003cec:	4413      	add	r3, r2
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	789b      	ldrb	r3, [r3, #2]
 8003cf4:	b25a      	sxtb	r2, r3
 8003cf6:	893b      	ldrh	r3, [r7, #8]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	b25b      	sxtb	r3, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	b25b      	sxtb	r3, r3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	b259      	sxtb	r1, r3
 8003d0c:	897a      	ldrh	r2, [r7, #10]
 8003d0e:	4603      	mov	r3, r0
 8003d10:	01db      	lsls	r3, r3, #7
 8003d12:	4413      	add	r3, r2
 8003d14:	b2c9      	uxtb	r1, r1
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	709a      	strb	r2, [r3, #2]
 8003d1e:	e000      	b.n	8003d22 <SSD1306_PutPixel+0xc2>
		return;
 8003d20:	bf00      	nop
	}
}
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	08005234 	.word	0x08005234
 8003d2c:	080052d8 	.word	0x080052d8
 8003d30:	0800523c 	.word	0x0800523c

08003d34 <SSD1306_DrawBitmap>:
 */
void SSD1306_DrawBitmap(
		SSD1306_HandleTypeDef* hssd, uint16_t x, uint16_t y,
		uint8_t* bitmap, uint16_t width, uint16_t height, uint8_t color
)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	4613      	mov	r3, r2
 8003d44:	813b      	strh	r3, [r7, #8]
	int16_t byteWidth = (width + 7) / 8;
 8003d46:	8c3b      	ldrh	r3, [r7, #32]
 8003d48:	3307      	adds	r3, #7
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da00      	bge.n	8003d50 <SSD1306_DrawBitmap+0x1c>
 8003d4e:	3307      	adds	r3, #7
 8003d50:	10db      	asrs	r3, r3, #3
 8003d52:	823b      	strh	r3, [r7, #16]
	uint8_t b = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	75fb      	strb	r3, [r7, #23]

	for(uint16_t j = 0; j < height; j++, y++) {
 8003d58:	2300      	movs	r3, #0
 8003d5a:	82bb      	strh	r3, [r7, #20]
 8003d5c:	e034      	b.n	8003dc8 <SSD1306_DrawBitmap+0x94>
		for(uint16_t i = 0; i < width; i++) {
 8003d5e:	2300      	movs	r3, #0
 8003d60:	827b      	strh	r3, [r7, #18]
 8003d62:	e027      	b.n	8003db4 <SSD1306_DrawBitmap+0x80>
			if(i & 7)
 8003d64:	8a7b      	ldrh	r3, [r7, #18]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <SSD1306_DrawBitmap+0x42>
				b <<= 1;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
 8003d74:	e00d      	b.n	8003d92 <SSD1306_DrawBitmap+0x5e>
			else
				b = bitmap[j * byteWidth + i / 8];
 8003d76:	8abb      	ldrh	r3, [r7, #20]
 8003d78:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	8a7a      	ldrh	r2, [r7, #18]
 8003d82:	08d2      	lsrs	r2, r2, #3
 8003d84:	b292      	uxth	r2, r2
 8003d86:	4413      	add	r3, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	75fb      	strb	r3, [r7, #23]
			if(b & 0x80)
 8003d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da09      	bge.n	8003dae <SSD1306_DrawBitmap+0x7a>
				SSD1306_PutPixel(hssd, x + i, y, color);
 8003d9a:	897a      	ldrh	r2, [r7, #10]
 8003d9c:	8a7b      	ldrh	r3, [r7, #18]
 8003d9e:	4413      	add	r3, r2
 8003da0:	b299      	uxth	r1, r3
 8003da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003da6:	893a      	ldrh	r2, [r7, #8]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff ff59 	bl	8003c60 <SSD1306_PutPixel>
		for(uint16_t i = 0; i < width; i++) {
 8003dae:	8a7b      	ldrh	r3, [r7, #18]
 8003db0:	3301      	adds	r3, #1
 8003db2:	827b      	strh	r3, [r7, #18]
 8003db4:	8a7a      	ldrh	r2, [r7, #18]
 8003db6:	8c3b      	ldrh	r3, [r7, #32]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3d3      	bcc.n	8003d64 <SSD1306_DrawBitmap+0x30>
	for(uint16_t j = 0; j < height; j++, y++) {
 8003dbc:	8abb      	ldrh	r3, [r7, #20]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	82bb      	strh	r3, [r7, #20]
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	813b      	strh	r3, [r7, #8]
 8003dc8:	8aba      	ldrh	r2, [r7, #20]
 8003dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d3c6      	bcc.n	8003d5e <SSD1306_DrawBitmap+0x2a>
		}
	}
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <SSD1306_DrawChar>:
 * Puts a character on the screen at x and y coordinates
 * Updates x and y cursor,
 * To automatically calculate next character placement, give hssd->x_cursor and y_cursor as x and y coordinates
 */
void SSD1306_DrawChar(SSD1306_HandleTypeDef* hssd, SSD1306_FontTypeDef* font, char ch, uint16_t x, uint16_t y, uint8_t color)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	4611      	mov	r1, r2
 8003de6:	461a      	mov	r2, r3
 8003de8:	460b      	mov	r3, r1
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80bb      	strh	r3, [r7, #4]
	hssd->x_cursor = x;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88ba      	ldrh	r2, [r7, #4]
 8003df4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	hssd->y_cursor = y;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8c3a      	ldrh	r2, [r7, #32]
 8003dfc:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208

	uint16_t i, b, j;

	for (i = 0; i < font->width; i++) {
 8003e00:	2300      	movs	r3, #0
 8003e02:	82fb      	strh	r3, [r7, #22]
 8003e04:	e055      	b.n	8003eb2 <SSD1306_DrawChar+0xd8>
		b = font->font[(ch - 32) * font->width + i];
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	79fa      	ldrb	r2, [r7, #7]
 8003e0c:	3a20      	subs	r2, #32
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	7809      	ldrb	r1, [r1, #0]
 8003e12:	fb02 f101 	mul.w	r1, r2, r1
 8003e16:	8afa      	ldrh	r2, [r7, #22]
 8003e18:	440a      	add	r2, r1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	827b      	strh	r3, [r7, #18]
		for (j = 0; j < font->height; j++) {
 8003e20:	2300      	movs	r3, #0
 8003e22:	82bb      	strh	r3, [r7, #20]
 8003e24:	e03c      	b.n	8003ea0 <SSD1306_DrawChar+0xc6>
			if ((b << j) & 0x80) {
 8003e26:	8a7a      	ldrh	r2, [r7, #18]
 8003e28:	8abb      	ldrh	r3, [r7, #20]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <SSD1306_DrawChar+0x8a>
				SSD1306_PutPixel(hssd, (hssd->x_cursor + i), ((hssd->y_cursor  + font->height) - j), color);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8003e3c:	8afb      	ldrh	r3, [r7, #22]
 8003e3e:	4413      	add	r3, r2
 8003e40:	b299      	uxth	r1, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	8abb      	ldrh	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff feff 	bl	8003c60 <SSD1306_PutPixel>
 8003e62:	e01a      	b.n	8003e9a <SSD1306_DrawChar+0xc0>
			}
			else {
				SSD1306_PutPixel(hssd, (hssd->x_cursor + i), ((hssd->y_cursor  + font->height) - j), !color);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8003e6a:	8afb      	ldrh	r3, [r7, #22]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	b299      	uxth	r1, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	8abb      	ldrh	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff fee3 	bl	8003c60 <SSD1306_PutPixel>
		for (j = 0; j < font->height; j++) {
 8003e9a:	8abb      	ldrh	r3, [r7, #20]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	82bb      	strh	r3, [r7, #20]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	8aba      	ldrh	r2, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d3bc      	bcc.n	8003e26 <SSD1306_DrawChar+0x4c>
	for (i = 0; i < font->width; i++) {
 8003eac:	8afb      	ldrh	r3, [r7, #22]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	82fb      	strh	r3, [r7, #22]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8afa      	ldrh	r2, [r7, #22]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3a3      	bcc.n	8003e06 <SSD1306_DrawChar+0x2c>
			}
		}
	}


	hssd->x_cursor += font->width;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
}
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SSD1306_DrawString>:
/*
 * 	Draws string,
 * 	Stops at terminating null character '\0'
 */
void SSD1306_DrawString(SSD1306_HandleTypeDef* hssd, SSD1306_FontTypeDef* font, char* s, uint16_t x, uint16_t y, uint8_t color)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	807b      	strh	r3, [r7, #2]
	hssd->x_cursor = x;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	887a      	ldrh	r2, [r7, #2]
 8003eee:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	hssd->y_cursor = y;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8c3a      	ldrh	r2, [r7, #32]
 8003ef6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208

	uint16_t i = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	82fb      	strh	r3, [r7, #22]
	while(s[i] != '\0') {
 8003efe:	e016      	b.n	8003f2e <SSD1306_DrawString+0x52>
		SSD1306_DrawChar(hssd, font, s[i++], hssd->x_cursor, hssd->y_cursor, color);
 8003f00:	8afb      	ldrh	r3, [r7, #22]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	82fa      	strh	r2, [r7, #22]
 8003f06:	461a      	mov	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	7819      	ldrb	r1, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003f1a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f1e:	9201      	str	r2, [sp, #4]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4603      	mov	r3, r0
 8003f24:	460a      	mov	r2, r1
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7ff ff56 	bl	8003dda <SSD1306_DrawChar>
	while(s[i] != '\0') {
 8003f2e:	8afb      	ldrh	r3, [r7, #22]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e2      	bne.n	8003f00 <SSD1306_DrawString+0x24>
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <SSD1306_Init>:
 * 	@Prama hi2c: HAL's i2c handle
 * 	@Param hssd: SSD1306 handle
 * 	@Param devAddress: slave address of SSD1306 device
 */
void SSD1306_Init(I2C_HandleTypeDef *hi2c, SSD1306_HandleTypeDef* hssd, uint16_t devAddress)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
	/* Check parameters */
	assert(hssd);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <SSD1306_Init+0x20>
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <SSD1306_Init+0x98>)
 8003f5a:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <SSD1306_Init+0x9c>)
 8003f5c:	21e7      	movs	r1, #231	; 0xe7
 8003f5e:	4821      	ldr	r0, [pc, #132]	; (8003fe4 <SSD1306_Init+0xa0>)
 8003f60:	f000 f922 	bl	80041a8 <__assert_func>
	assert(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <SSD1306_Init+0x32>
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <SSD1306_Init+0xa4>)
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <SSD1306_Init+0x9c>)
 8003f6e:	21e8      	movs	r1, #232	; 0xe8
 8003f70:	481c      	ldr	r0, [pc, #112]	; (8003fe4 <SSD1306_Init+0xa0>)
 8003f72:	f000 f919 	bl	80041a8 <__assert_func>
	assert(devAddress);
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <SSD1306_Init+0x44>
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <SSD1306_Init+0xa8>)
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <SSD1306_Init+0x9c>)
 8003f80:	21e9      	movs	r1, #233	; 0xe9
 8003f82:	4818      	ldr	r0, [pc, #96]	; (8003fe4 <SSD1306_Init+0xa0>)
 8003f84:	f000 f910 	bl	80041a8 <__assert_func>

	/* Save (OLED)device address */
	hssd->devAddress = devAddress;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	801a      	strh	r2, [r3, #0]

	/* SET BUFFER TO 0x0 */
	memset(hssd->buffer, 0, SSD1306_128_32_BUFFERSIZE);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3302      	adds	r3, #2
 8003f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f95f 	bl	800425c <memset>

	/* SET DISPLAY DIMENSIONS */
	hssd->height = SSD1306_128_32_HEIGHT;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	hssd->width = SSD1306_128_32_WIDTH;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203

	hssd->inverted = 0;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204

	/* Set I2C handle */
	hssd->hi2c = hi2c;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	hssd->x_cursor = 0;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	hssd->y_cursor = 0;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208

	/* Display Initialisation commands */
	SSD1306_InitCommands(hssd);
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f000 f80e 	bl	8003ff0 <SSD1306_InitCommands>
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08005234 	.word	0x08005234
 8003fe0:	080052ec 	.word	0x080052ec
 8003fe4:	0800523c 	.word	0x0800523c
 8003fe8:	08005280 	.word	0x08005280
 8003fec:	08005288 	.word	0x08005288

08003ff0 <SSD1306_InitCommands>:
/*
 *	SSD1306_InitCommands
 *	@params hssd: SSD1306 handle
 */
void SSD1306_InitCommands(SSD1306_HandleTypeDef* hssd)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b096      	sub	sp, #88	; 0x58
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	/* Turn Display OFF */
	{
		uint8_t init[] = {
 8003ff8:	23ae      	movs	r3, #174	; 0xae
 8003ffa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				CMD_DISPLAY_OFF 		// 0xAE
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8003ffe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004002:	2201      	movs	r2, #1
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fd5c 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Horizontal memory Addressing mode  */
	{
		uint8_t init[] = {
 800400c:	2320      	movs	r3, #32
 800400e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				CMD_SET_MEMORY_ADR_MODE, // 0x20
				MM_ADR_MODE_HORIZONTAL
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004012:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004016:	2202      	movs	r2, #2
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fd52 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set COM Output Scan Direction */
	{
		uint8_t init[] = {
 8004020:	23c8      	movs	r3, #200	; 0xc8
 8004022:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				CMD_SET_COM_SCAN_DIR | 0x08	// 0xC8
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004026:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800402a:	2201      	movs	r2, #1
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fd48 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Column Address  */
	{
		uint8_t init[] = {
 8004034:	2321      	movs	r3, #33	; 0x21
 8004036:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800403a:	2300      	movs	r3, #0
 800403c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				CMD_SET_COLUMN_ADR, 	// 0x21
				0x00,
				(hssd->width - 1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004046:	3b01      	subs	r3, #1
 8004048:	b2db      	uxtb	r3, r3
		uint8_t init[] = {
 800404a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 800404e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004052:	2203      	movs	r2, #3
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fd34 	bl	8003ac4 <SSD1306_WriteCommand>
 	}

	/* Set Page Address  */
	{
		uint8_t init[] = {
 800405c:	4a51      	ldr	r2, [pc, #324]	; (80041a4 <SSD1306_InitCommands+0x1b4>)
 800405e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	4611      	mov	r1, r2
 8004066:	8019      	strh	r1, [r3, #0]
 8004068:	3302      	adds	r3, #2
 800406a:	0c12      	lsrs	r2, r2, #16
 800406c:	701a      	strb	r2, [r3, #0]
				CMD_SET_PAGE_ADR, 	// 0x22
				0x00,
				0x03				//<- FOR SOME REASON 0x07(which is the max) does not work.
									// Maybe because i use a 128x32 display, not sure
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 800406e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004072:	2203      	movs	r2, #3
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fd24 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Display Contrast */
	{
		uint8_t init[] = {
 800407c:	f648 7381 	movw	r3, #36737	; 0x8f81
 8004080:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				CMD_SET_CONTRAST, // 0x81
				0x8F
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004084:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004088:	2202      	movs	r2, #2
 800408a:	4619      	mov	r1, r3
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fd19 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Segment re-map */
	{
		uint8_t init[] = {
 8004092:	23a1      	movs	r3, #161	; 0xa1
 8004094:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				CMD_SET_SEGMENT_RMAP_127	// 0xA1
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004098:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800409c:	2201      	movs	r2, #1
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fd0f 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Multiplex ratio */
	{
		uint8_t init[] = {
 80040a6:	23a8      	movs	r3, #168	; 0xa8
 80040a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				CMD_SET_MULTIPLEX_RATIO, // 0xA8
				(hssd->height - 1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
		uint8_t init[] = {
 80040b6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 80040ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040be:	2202      	movs	r2, #2
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fcfe 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Display Start Line */
	{
		uint8_t init[] = {
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				CMD_SET_DISPLAY_START_LINE // 0x40
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 80040ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040d2:	2201      	movs	r2, #1
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fcf4 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Display Offset */
	{
		uint8_t init[] = {
 80040dc:	23d3      	movs	r3, #211	; 0xd3
 80040de:	863b      	strh	r3, [r7, #48]	; 0x30
				CMD_SET_DISPLAY_OFFSET, // 0xD3
				0x0
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 80040e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e4:	2202      	movs	r2, #2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fceb 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Display's clock ratio */
	{
		uint8_t init[] = {
 80040ee:	f248 03d5 	movw	r3, #32981	; 0x80d5
 80040f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
				CMD_SET_CLOCK_DIVIDE_RATIO_AND_F, // 0xD5
				0x80
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 80040f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f8:	2202      	movs	r2, #2
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff fce1 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Pre-charge period */
	{
		uint8_t init[] = {
 8004102:	f242 23d9 	movw	r3, #8921	; 0x22d9
 8004106:	853b      	strh	r3, [r7, #40]	; 0x28
				CMD_SET_PREC_PERIOD, // 0xD9
				0x22
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800410c:	2202      	movs	r2, #2
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fcd7 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Vcomh Deselect level */
	{
		uint8_t init[] = {
 8004116:	f244 03db 	movw	r3, #16603	; 0x40db
 800411a:	84bb      	strh	r3, [r7, #36]	; 0x24
				CMD_SET_COMH_DESELECT_LVL, // 0xDB
				0x40
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 800411c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004120:	2202      	movs	r2, #2
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fccd 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set COM Pins */
	{
		uint8_t init[] = {
 800412a:	f240 23da 	movw	r3, #730	; 0x2da
 800412e:	843b      	strh	r3, [r7, #32]
				CMD_SET_COM_PINS, // 0xDA
				0x02
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004130:	f107 0320 	add.w	r3, r7, #32
 8004134:	2202      	movs	r2, #2
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff fcc3 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Chargepump */
	{
		uint8_t init[] = {
 800413e:	f241 438d 	movw	r3, #5261	; 0x148d
 8004142:	83bb      	strh	r3, [r7, #28]
				CMD_CHARGE_PUMP_SETTING,	// 0x8D
				0x14
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004144:	f107 031c 	add.w	r3, r7, #28
 8004148:	2202      	movs	r2, #2
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fcb9 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Entire Display ON, Resume RAM content  */
	{
		uint8_t init[] = {
 8004152:	23a4      	movs	r3, #164	; 0xa4
 8004154:	763b      	strb	r3, [r7, #24]
				CMD_ENTIRE_DISPLAY_ON_RESUME // 0xA4
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004156:	f107 0318 	add.w	r3, r7, #24
 800415a:	2201      	movs	r2, #1
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fcb0 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Display mode to Normal */
	{
		uint8_t init[] = {
 8004164:	23a6      	movs	r3, #166	; 0xa6
 8004166:	753b      	strb	r3, [r7, #20]
				CMD_DISPLAY_NORMAL 	// 0xA6
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 8004168:	f107 0314 	add.w	r3, r7, #20
 800416c:	2201      	movs	r2, #1
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fca7 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Disable Scroll  */
	{
		uint8_t init[] = {
 8004176:	232e      	movs	r3, #46	; 0x2e
 8004178:	743b      	strb	r3, [r7, #16]
				CMD_DEACTIVATE_SCROLL	// 0x2E
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 800417a:	f107 0310 	add.w	r3, r7, #16
 800417e:	2201      	movs	r2, #1
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fc9e 	bl	8003ac4 <SSD1306_WriteCommand>
	}

	/* Set Display ON */
	{
		uint8_t init[] = {
 8004188:	23af      	movs	r3, #175	; 0xaf
 800418a:	733b      	strb	r3, [r7, #12]
				CMD_DISPLAY_ON		// 0xAF
		};
		SSD1306_WriteCommand(hssd, init, sizeof(init));
 800418c:	f107 030c 	add.w	r3, r7, #12
 8004190:	2201      	movs	r2, #1
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff fc95 	bl	8003ac4 <SSD1306_WriteCommand>
	}
}
 800419a:	bf00      	nop
 800419c:	3758      	adds	r7, #88	; 0x58
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	08005294 	.word	0x08005294

080041a8 <__assert_func>:
 80041a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041aa:	4614      	mov	r4, r2
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <__assert_func+0x2c>)
 80041b0:	4605      	mov	r5, r0
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68d8      	ldr	r0, [r3, #12]
 80041b6:	b14c      	cbz	r4, 80041cc <__assert_func+0x24>
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <__assert_func+0x30>)
 80041ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041be:	9100      	str	r1, [sp, #0]
 80041c0:	462b      	mov	r3, r5
 80041c2:	4906      	ldr	r1, [pc, #24]	; (80041dc <__assert_func+0x34>)
 80041c4:	f000 f814 	bl	80041f0 <fiprintf>
 80041c8:	f000 fbfe 	bl	80049c8 <abort>
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <__assert_func+0x38>)
 80041ce:	461c      	mov	r4, r3
 80041d0:	e7f3      	b.n	80041ba <__assert_func+0x12>
 80041d2:	bf00      	nop
 80041d4:	200002cc 	.word	0x200002cc
 80041d8:	080052f9 	.word	0x080052f9
 80041dc:	08005306 	.word	0x08005306
 80041e0:	08005334 	.word	0x08005334

080041e4 <__errno>:
 80041e4:	4b01      	ldr	r3, [pc, #4]	; (80041ec <__errno+0x8>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	200002cc 	.word	0x200002cc

080041f0 <fiprintf>:
 80041f0:	b40e      	push	{r1, r2, r3}
 80041f2:	b503      	push	{r0, r1, lr}
 80041f4:	4601      	mov	r1, r0
 80041f6:	ab03      	add	r3, sp, #12
 80041f8:	4805      	ldr	r0, [pc, #20]	; (8004210 <fiprintf+0x20>)
 80041fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80041fe:	6800      	ldr	r0, [r0, #0]
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	f000 f85b 	bl	80042bc <_vfiprintf_r>
 8004206:	b002      	add	sp, #8
 8004208:	f85d eb04 	ldr.w	lr, [sp], #4
 800420c:	b003      	add	sp, #12
 800420e:	4770      	bx	lr
 8004210:	200002cc 	.word	0x200002cc

08004214 <__libc_init_array>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	2600      	movs	r6, #0
 8004218:	4d0c      	ldr	r5, [pc, #48]	; (800424c <__libc_init_array+0x38>)
 800421a:	4c0d      	ldr	r4, [pc, #52]	; (8004250 <__libc_init_array+0x3c>)
 800421c:	1b64      	subs	r4, r4, r5
 800421e:	10a4      	asrs	r4, r4, #2
 8004220:	42a6      	cmp	r6, r4
 8004222:	d109      	bne.n	8004238 <__libc_init_array+0x24>
 8004224:	f000 ffea 	bl	80051fc <_init>
 8004228:	2600      	movs	r6, #0
 800422a:	4d0a      	ldr	r5, [pc, #40]	; (8004254 <__libc_init_array+0x40>)
 800422c:	4c0a      	ldr	r4, [pc, #40]	; (8004258 <__libc_init_array+0x44>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	42a6      	cmp	r6, r4
 8004234:	d105      	bne.n	8004242 <__libc_init_array+0x2e>
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	f855 3b04 	ldr.w	r3, [r5], #4
 800423c:	4798      	blx	r3
 800423e:	3601      	adds	r6, #1
 8004240:	e7ee      	b.n	8004220 <__libc_init_array+0xc>
 8004242:	f855 3b04 	ldr.w	r3, [r5], #4
 8004246:	4798      	blx	r3
 8004248:	3601      	adds	r6, #1
 800424a:	e7f2      	b.n	8004232 <__libc_init_array+0x1e>
 800424c:	080053d0 	.word	0x080053d0
 8004250:	080053d0 	.word	0x080053d0
 8004254:	080053d0 	.word	0x080053d0
 8004258:	080053d4 	.word	0x080053d4

0800425c <memset>:
 800425c:	4603      	mov	r3, r0
 800425e:	4402      	add	r2, r0
 8004260:	4293      	cmp	r3, r2
 8004262:	d100      	bne.n	8004266 <memset+0xa>
 8004264:	4770      	bx	lr
 8004266:	f803 1b01 	strb.w	r1, [r3], #1
 800426a:	e7f9      	b.n	8004260 <memset+0x4>

0800426c <__sfputc_r>:
 800426c:	6893      	ldr	r3, [r2, #8]
 800426e:	b410      	push	{r4}
 8004270:	3b01      	subs	r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	6093      	str	r3, [r2, #8]
 8004276:	da07      	bge.n	8004288 <__sfputc_r+0x1c>
 8004278:	6994      	ldr	r4, [r2, #24]
 800427a:	42a3      	cmp	r3, r4
 800427c:	db01      	blt.n	8004282 <__sfputc_r+0x16>
 800427e:	290a      	cmp	r1, #10
 8004280:	d102      	bne.n	8004288 <__sfputc_r+0x1c>
 8004282:	bc10      	pop	{r4}
 8004284:	f000 bae0 	b.w	8004848 <__swbuf_r>
 8004288:	6813      	ldr	r3, [r2, #0]
 800428a:	1c58      	adds	r0, r3, #1
 800428c:	6010      	str	r0, [r2, #0]
 800428e:	7019      	strb	r1, [r3, #0]
 8004290:	4608      	mov	r0, r1
 8004292:	bc10      	pop	{r4}
 8004294:	4770      	bx	lr

08004296 <__sfputs_r>:
 8004296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004298:	4606      	mov	r6, r0
 800429a:	460f      	mov	r7, r1
 800429c:	4614      	mov	r4, r2
 800429e:	18d5      	adds	r5, r2, r3
 80042a0:	42ac      	cmp	r4, r5
 80042a2:	d101      	bne.n	80042a8 <__sfputs_r+0x12>
 80042a4:	2000      	movs	r0, #0
 80042a6:	e007      	b.n	80042b8 <__sfputs_r+0x22>
 80042a8:	463a      	mov	r2, r7
 80042aa:	4630      	mov	r0, r6
 80042ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b0:	f7ff ffdc 	bl	800426c <__sfputc_r>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d1f3      	bne.n	80042a0 <__sfputs_r+0xa>
 80042b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042bc <_vfiprintf_r>:
 80042bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c0:	460d      	mov	r5, r1
 80042c2:	4614      	mov	r4, r2
 80042c4:	4698      	mov	r8, r3
 80042c6:	4606      	mov	r6, r0
 80042c8:	b09d      	sub	sp, #116	; 0x74
 80042ca:	b118      	cbz	r0, 80042d4 <_vfiprintf_r+0x18>
 80042cc:	6983      	ldr	r3, [r0, #24]
 80042ce:	b90b      	cbnz	r3, 80042d4 <_vfiprintf_r+0x18>
 80042d0:	f000 fc98 	bl	8004c04 <__sinit>
 80042d4:	4b89      	ldr	r3, [pc, #548]	; (80044fc <_vfiprintf_r+0x240>)
 80042d6:	429d      	cmp	r5, r3
 80042d8:	d11b      	bne.n	8004312 <_vfiprintf_r+0x56>
 80042da:	6875      	ldr	r5, [r6, #4]
 80042dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042de:	07d9      	lsls	r1, r3, #31
 80042e0:	d405      	bmi.n	80042ee <_vfiprintf_r+0x32>
 80042e2:	89ab      	ldrh	r3, [r5, #12]
 80042e4:	059a      	lsls	r2, r3, #22
 80042e6:	d402      	bmi.n	80042ee <_vfiprintf_r+0x32>
 80042e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042ea:	f000 fd29 	bl	8004d40 <__retarget_lock_acquire_recursive>
 80042ee:	89ab      	ldrh	r3, [r5, #12]
 80042f0:	071b      	lsls	r3, r3, #28
 80042f2:	d501      	bpl.n	80042f8 <_vfiprintf_r+0x3c>
 80042f4:	692b      	ldr	r3, [r5, #16]
 80042f6:	b9eb      	cbnz	r3, 8004334 <_vfiprintf_r+0x78>
 80042f8:	4629      	mov	r1, r5
 80042fa:	4630      	mov	r0, r6
 80042fc:	f000 faf6 	bl	80048ec <__swsetup_r>
 8004300:	b1c0      	cbz	r0, 8004334 <_vfiprintf_r+0x78>
 8004302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004304:	07dc      	lsls	r4, r3, #31
 8004306:	d50e      	bpl.n	8004326 <_vfiprintf_r+0x6a>
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	b01d      	add	sp, #116	; 0x74
 800430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004312:	4b7b      	ldr	r3, [pc, #492]	; (8004500 <_vfiprintf_r+0x244>)
 8004314:	429d      	cmp	r5, r3
 8004316:	d101      	bne.n	800431c <_vfiprintf_r+0x60>
 8004318:	68b5      	ldr	r5, [r6, #8]
 800431a:	e7df      	b.n	80042dc <_vfiprintf_r+0x20>
 800431c:	4b79      	ldr	r3, [pc, #484]	; (8004504 <_vfiprintf_r+0x248>)
 800431e:	429d      	cmp	r5, r3
 8004320:	bf08      	it	eq
 8004322:	68f5      	ldreq	r5, [r6, #12]
 8004324:	e7da      	b.n	80042dc <_vfiprintf_r+0x20>
 8004326:	89ab      	ldrh	r3, [r5, #12]
 8004328:	0598      	lsls	r0, r3, #22
 800432a:	d4ed      	bmi.n	8004308 <_vfiprintf_r+0x4c>
 800432c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800432e:	f000 fd08 	bl	8004d42 <__retarget_lock_release_recursive>
 8004332:	e7e9      	b.n	8004308 <_vfiprintf_r+0x4c>
 8004334:	2300      	movs	r3, #0
 8004336:	9309      	str	r3, [sp, #36]	; 0x24
 8004338:	2320      	movs	r3, #32
 800433a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800433e:	2330      	movs	r3, #48	; 0x30
 8004340:	f04f 0901 	mov.w	r9, #1
 8004344:	f8cd 800c 	str.w	r8, [sp, #12]
 8004348:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004508 <_vfiprintf_r+0x24c>
 800434c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004350:	4623      	mov	r3, r4
 8004352:	469a      	mov	sl, r3
 8004354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004358:	b10a      	cbz	r2, 800435e <_vfiprintf_r+0xa2>
 800435a:	2a25      	cmp	r2, #37	; 0x25
 800435c:	d1f9      	bne.n	8004352 <_vfiprintf_r+0x96>
 800435e:	ebba 0b04 	subs.w	fp, sl, r4
 8004362:	d00b      	beq.n	800437c <_vfiprintf_r+0xc0>
 8004364:	465b      	mov	r3, fp
 8004366:	4622      	mov	r2, r4
 8004368:	4629      	mov	r1, r5
 800436a:	4630      	mov	r0, r6
 800436c:	f7ff ff93 	bl	8004296 <__sfputs_r>
 8004370:	3001      	adds	r0, #1
 8004372:	f000 80aa 	beq.w	80044ca <_vfiprintf_r+0x20e>
 8004376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004378:	445a      	add	r2, fp
 800437a:	9209      	str	r2, [sp, #36]	; 0x24
 800437c:	f89a 3000 	ldrb.w	r3, [sl]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80a2 	beq.w	80044ca <_vfiprintf_r+0x20e>
 8004386:	2300      	movs	r3, #0
 8004388:	f04f 32ff 	mov.w	r2, #4294967295
 800438c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004390:	f10a 0a01 	add.w	sl, sl, #1
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	9307      	str	r3, [sp, #28]
 8004398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800439c:	931a      	str	r3, [sp, #104]	; 0x68
 800439e:	4654      	mov	r4, sl
 80043a0:	2205      	movs	r2, #5
 80043a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a6:	4858      	ldr	r0, [pc, #352]	; (8004508 <_vfiprintf_r+0x24c>)
 80043a8:	f000 fd32 	bl	8004e10 <memchr>
 80043ac:	9a04      	ldr	r2, [sp, #16]
 80043ae:	b9d8      	cbnz	r0, 80043e8 <_vfiprintf_r+0x12c>
 80043b0:	06d1      	lsls	r1, r2, #27
 80043b2:	bf44      	itt	mi
 80043b4:	2320      	movmi	r3, #32
 80043b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ba:	0713      	lsls	r3, r2, #28
 80043bc:	bf44      	itt	mi
 80043be:	232b      	movmi	r3, #43	; 0x2b
 80043c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c4:	f89a 3000 	ldrb.w	r3, [sl]
 80043c8:	2b2a      	cmp	r3, #42	; 0x2a
 80043ca:	d015      	beq.n	80043f8 <_vfiprintf_r+0x13c>
 80043cc:	4654      	mov	r4, sl
 80043ce:	2000      	movs	r0, #0
 80043d0:	f04f 0c0a 	mov.w	ip, #10
 80043d4:	9a07      	ldr	r2, [sp, #28]
 80043d6:	4621      	mov	r1, r4
 80043d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043dc:	3b30      	subs	r3, #48	; 0x30
 80043de:	2b09      	cmp	r3, #9
 80043e0:	d94e      	bls.n	8004480 <_vfiprintf_r+0x1c4>
 80043e2:	b1b0      	cbz	r0, 8004412 <_vfiprintf_r+0x156>
 80043e4:	9207      	str	r2, [sp, #28]
 80043e6:	e014      	b.n	8004412 <_vfiprintf_r+0x156>
 80043e8:	eba0 0308 	sub.w	r3, r0, r8
 80043ec:	fa09 f303 	lsl.w	r3, r9, r3
 80043f0:	4313      	orrs	r3, r2
 80043f2:	46a2      	mov	sl, r4
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	e7d2      	b.n	800439e <_vfiprintf_r+0xe2>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	1d19      	adds	r1, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	9103      	str	r1, [sp, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	bfbb      	ittet	lt
 8004404:	425b      	neglt	r3, r3
 8004406:	f042 0202 	orrlt.w	r2, r2, #2
 800440a:	9307      	strge	r3, [sp, #28]
 800440c:	9307      	strlt	r3, [sp, #28]
 800440e:	bfb8      	it	lt
 8004410:	9204      	strlt	r2, [sp, #16]
 8004412:	7823      	ldrb	r3, [r4, #0]
 8004414:	2b2e      	cmp	r3, #46	; 0x2e
 8004416:	d10c      	bne.n	8004432 <_vfiprintf_r+0x176>
 8004418:	7863      	ldrb	r3, [r4, #1]
 800441a:	2b2a      	cmp	r3, #42	; 0x2a
 800441c:	d135      	bne.n	800448a <_vfiprintf_r+0x1ce>
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	3402      	adds	r4, #2
 8004422:	1d1a      	adds	r2, r3, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	9203      	str	r2, [sp, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	bfb8      	it	lt
 800442c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004430:	9305      	str	r3, [sp, #20]
 8004432:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800450c <_vfiprintf_r+0x250>
 8004436:	2203      	movs	r2, #3
 8004438:	4650      	mov	r0, sl
 800443a:	7821      	ldrb	r1, [r4, #0]
 800443c:	f000 fce8 	bl	8004e10 <memchr>
 8004440:	b140      	cbz	r0, 8004454 <_vfiprintf_r+0x198>
 8004442:	2340      	movs	r3, #64	; 0x40
 8004444:	eba0 000a 	sub.w	r0, r0, sl
 8004448:	fa03 f000 	lsl.w	r0, r3, r0
 800444c:	9b04      	ldr	r3, [sp, #16]
 800444e:	3401      	adds	r4, #1
 8004450:	4303      	orrs	r3, r0
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004458:	2206      	movs	r2, #6
 800445a:	482d      	ldr	r0, [pc, #180]	; (8004510 <_vfiprintf_r+0x254>)
 800445c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004460:	f000 fcd6 	bl	8004e10 <memchr>
 8004464:	2800      	cmp	r0, #0
 8004466:	d03f      	beq.n	80044e8 <_vfiprintf_r+0x22c>
 8004468:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <_vfiprintf_r+0x258>)
 800446a:	bb1b      	cbnz	r3, 80044b4 <_vfiprintf_r+0x1f8>
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	3307      	adds	r3, #7
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	3308      	adds	r3, #8
 8004476:	9303      	str	r3, [sp, #12]
 8004478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447a:	443b      	add	r3, r7
 800447c:	9309      	str	r3, [sp, #36]	; 0x24
 800447e:	e767      	b.n	8004350 <_vfiprintf_r+0x94>
 8004480:	460c      	mov	r4, r1
 8004482:	2001      	movs	r0, #1
 8004484:	fb0c 3202 	mla	r2, ip, r2, r3
 8004488:	e7a5      	b.n	80043d6 <_vfiprintf_r+0x11a>
 800448a:	2300      	movs	r3, #0
 800448c:	f04f 0c0a 	mov.w	ip, #10
 8004490:	4619      	mov	r1, r3
 8004492:	3401      	adds	r4, #1
 8004494:	9305      	str	r3, [sp, #20]
 8004496:	4620      	mov	r0, r4
 8004498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800449c:	3a30      	subs	r2, #48	; 0x30
 800449e:	2a09      	cmp	r2, #9
 80044a0:	d903      	bls.n	80044aa <_vfiprintf_r+0x1ee>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0c5      	beq.n	8004432 <_vfiprintf_r+0x176>
 80044a6:	9105      	str	r1, [sp, #20]
 80044a8:	e7c3      	b.n	8004432 <_vfiprintf_r+0x176>
 80044aa:	4604      	mov	r4, r0
 80044ac:	2301      	movs	r3, #1
 80044ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b2:	e7f0      	b.n	8004496 <_vfiprintf_r+0x1da>
 80044b4:	ab03      	add	r3, sp, #12
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	462a      	mov	r2, r5
 80044ba:	4630      	mov	r0, r6
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <_vfiprintf_r+0x25c>)
 80044be:	a904      	add	r1, sp, #16
 80044c0:	f3af 8000 	nop.w
 80044c4:	4607      	mov	r7, r0
 80044c6:	1c78      	adds	r0, r7, #1
 80044c8:	d1d6      	bne.n	8004478 <_vfiprintf_r+0x1bc>
 80044ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044cc:	07d9      	lsls	r1, r3, #31
 80044ce:	d405      	bmi.n	80044dc <_vfiprintf_r+0x220>
 80044d0:	89ab      	ldrh	r3, [r5, #12]
 80044d2:	059a      	lsls	r2, r3, #22
 80044d4:	d402      	bmi.n	80044dc <_vfiprintf_r+0x220>
 80044d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044d8:	f000 fc33 	bl	8004d42 <__retarget_lock_release_recursive>
 80044dc:	89ab      	ldrh	r3, [r5, #12]
 80044de:	065b      	lsls	r3, r3, #25
 80044e0:	f53f af12 	bmi.w	8004308 <_vfiprintf_r+0x4c>
 80044e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044e6:	e711      	b.n	800430c <_vfiprintf_r+0x50>
 80044e8:	ab03      	add	r3, sp, #12
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	462a      	mov	r2, r5
 80044ee:	4630      	mov	r0, r6
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <_vfiprintf_r+0x25c>)
 80044f2:	a904      	add	r1, sp, #16
 80044f4:	f000 f882 	bl	80045fc <_printf_i>
 80044f8:	e7e4      	b.n	80044c4 <_vfiprintf_r+0x208>
 80044fa:	bf00      	nop
 80044fc:	08005390 	.word	0x08005390
 8004500:	080053b0 	.word	0x080053b0
 8004504:	08005370 	.word	0x08005370
 8004508:	0800533c 	.word	0x0800533c
 800450c:	08005342 	.word	0x08005342
 8004510:	08005346 	.word	0x08005346
 8004514:	00000000 	.word	0x00000000
 8004518:	08004297 	.word	0x08004297

0800451c <_printf_common>:
 800451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004520:	4616      	mov	r6, r2
 8004522:	4699      	mov	r9, r3
 8004524:	688a      	ldr	r2, [r1, #8]
 8004526:	690b      	ldr	r3, [r1, #16]
 8004528:	4607      	mov	r7, r0
 800452a:	4293      	cmp	r3, r2
 800452c:	bfb8      	it	lt
 800452e:	4613      	movlt	r3, r2
 8004530:	6033      	str	r3, [r6, #0]
 8004532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004536:	460c      	mov	r4, r1
 8004538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800453c:	b10a      	cbz	r2, 8004542 <_printf_common+0x26>
 800453e:	3301      	adds	r3, #1
 8004540:	6033      	str	r3, [r6, #0]
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	0699      	lsls	r1, r3, #26
 8004546:	bf42      	ittt	mi
 8004548:	6833      	ldrmi	r3, [r6, #0]
 800454a:	3302      	addmi	r3, #2
 800454c:	6033      	strmi	r3, [r6, #0]
 800454e:	6825      	ldr	r5, [r4, #0]
 8004550:	f015 0506 	ands.w	r5, r5, #6
 8004554:	d106      	bne.n	8004564 <_printf_common+0x48>
 8004556:	f104 0a19 	add.w	sl, r4, #25
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	6832      	ldr	r2, [r6, #0]
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	42ab      	cmp	r3, r5
 8004562:	dc28      	bgt.n	80045b6 <_printf_common+0x9a>
 8004564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004568:	1e13      	subs	r3, r2, #0
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	bf18      	it	ne
 800456e:	2301      	movne	r3, #1
 8004570:	0692      	lsls	r2, r2, #26
 8004572:	d42d      	bmi.n	80045d0 <_printf_common+0xb4>
 8004574:	4649      	mov	r1, r9
 8004576:	4638      	mov	r0, r7
 8004578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800457c:	47c0      	blx	r8
 800457e:	3001      	adds	r0, #1
 8004580:	d020      	beq.n	80045c4 <_printf_common+0xa8>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	68e5      	ldr	r5, [r4, #12]
 8004586:	f003 0306 	and.w	r3, r3, #6
 800458a:	2b04      	cmp	r3, #4
 800458c:	bf18      	it	ne
 800458e:	2500      	movne	r5, #0
 8004590:	6832      	ldr	r2, [r6, #0]
 8004592:	f04f 0600 	mov.w	r6, #0
 8004596:	68a3      	ldr	r3, [r4, #8]
 8004598:	bf08      	it	eq
 800459a:	1aad      	subeq	r5, r5, r2
 800459c:	6922      	ldr	r2, [r4, #16]
 800459e:	bf08      	it	eq
 80045a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045a4:	4293      	cmp	r3, r2
 80045a6:	bfc4      	itt	gt
 80045a8:	1a9b      	subgt	r3, r3, r2
 80045aa:	18ed      	addgt	r5, r5, r3
 80045ac:	341a      	adds	r4, #26
 80045ae:	42b5      	cmp	r5, r6
 80045b0:	d11a      	bne.n	80045e8 <_printf_common+0xcc>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e008      	b.n	80045c8 <_printf_common+0xac>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4652      	mov	r2, sl
 80045ba:	4649      	mov	r1, r9
 80045bc:	4638      	mov	r0, r7
 80045be:	47c0      	blx	r8
 80045c0:	3001      	adds	r0, #1
 80045c2:	d103      	bne.n	80045cc <_printf_common+0xb0>
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045cc:	3501      	adds	r5, #1
 80045ce:	e7c4      	b.n	800455a <_printf_common+0x3e>
 80045d0:	2030      	movs	r0, #48	; 0x30
 80045d2:	18e1      	adds	r1, r4, r3
 80045d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045de:	4422      	add	r2, r4
 80045e0:	3302      	adds	r3, #2
 80045e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045e6:	e7c5      	b.n	8004574 <_printf_common+0x58>
 80045e8:	2301      	movs	r3, #1
 80045ea:	4622      	mov	r2, r4
 80045ec:	4649      	mov	r1, r9
 80045ee:	4638      	mov	r0, r7
 80045f0:	47c0      	blx	r8
 80045f2:	3001      	adds	r0, #1
 80045f4:	d0e6      	beq.n	80045c4 <_printf_common+0xa8>
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7d9      	b.n	80045ae <_printf_common+0x92>
	...

080045fc <_printf_i>:
 80045fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	7e0f      	ldrb	r7, [r1, #24]
 8004602:	4691      	mov	r9, r2
 8004604:	2f78      	cmp	r7, #120	; 0x78
 8004606:	4680      	mov	r8, r0
 8004608:	460c      	mov	r4, r1
 800460a:	469a      	mov	sl, r3
 800460c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800460e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004612:	d807      	bhi.n	8004624 <_printf_i+0x28>
 8004614:	2f62      	cmp	r7, #98	; 0x62
 8004616:	d80a      	bhi.n	800462e <_printf_i+0x32>
 8004618:	2f00      	cmp	r7, #0
 800461a:	f000 80d9 	beq.w	80047d0 <_printf_i+0x1d4>
 800461e:	2f58      	cmp	r7, #88	; 0x58
 8004620:	f000 80a4 	beq.w	800476c <_printf_i+0x170>
 8004624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800462c:	e03a      	b.n	80046a4 <_printf_i+0xa8>
 800462e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004632:	2b15      	cmp	r3, #21
 8004634:	d8f6      	bhi.n	8004624 <_printf_i+0x28>
 8004636:	a101      	add	r1, pc, #4	; (adr r1, 800463c <_printf_i+0x40>)
 8004638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800463c:	08004695 	.word	0x08004695
 8004640:	080046a9 	.word	0x080046a9
 8004644:	08004625 	.word	0x08004625
 8004648:	08004625 	.word	0x08004625
 800464c:	08004625 	.word	0x08004625
 8004650:	08004625 	.word	0x08004625
 8004654:	080046a9 	.word	0x080046a9
 8004658:	08004625 	.word	0x08004625
 800465c:	08004625 	.word	0x08004625
 8004660:	08004625 	.word	0x08004625
 8004664:	08004625 	.word	0x08004625
 8004668:	080047b7 	.word	0x080047b7
 800466c:	080046d9 	.word	0x080046d9
 8004670:	08004799 	.word	0x08004799
 8004674:	08004625 	.word	0x08004625
 8004678:	08004625 	.word	0x08004625
 800467c:	080047d9 	.word	0x080047d9
 8004680:	08004625 	.word	0x08004625
 8004684:	080046d9 	.word	0x080046d9
 8004688:	08004625 	.word	0x08004625
 800468c:	08004625 	.word	0x08004625
 8004690:	080047a1 	.word	0x080047a1
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	1d1a      	adds	r2, r3, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	602a      	str	r2, [r5, #0]
 800469c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0a4      	b.n	80047f2 <_printf_i+0x1f6>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	6829      	ldr	r1, [r5, #0]
 80046ac:	0606      	lsls	r6, r0, #24
 80046ae:	f101 0304 	add.w	r3, r1, #4
 80046b2:	d50a      	bpl.n	80046ca <_printf_i+0xce>
 80046b4:	680e      	ldr	r6, [r1, #0]
 80046b6:	602b      	str	r3, [r5, #0]
 80046b8:	2e00      	cmp	r6, #0
 80046ba:	da03      	bge.n	80046c4 <_printf_i+0xc8>
 80046bc:	232d      	movs	r3, #45	; 0x2d
 80046be:	4276      	negs	r6, r6
 80046c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c4:	230a      	movs	r3, #10
 80046c6:	485e      	ldr	r0, [pc, #376]	; (8004840 <_printf_i+0x244>)
 80046c8:	e019      	b.n	80046fe <_printf_i+0x102>
 80046ca:	680e      	ldr	r6, [r1, #0]
 80046cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	bf18      	it	ne
 80046d4:	b236      	sxthne	r6, r6
 80046d6:	e7ef      	b.n	80046b8 <_printf_i+0xbc>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	1d19      	adds	r1, r3, #4
 80046de:	6029      	str	r1, [r5, #0]
 80046e0:	0601      	lsls	r1, r0, #24
 80046e2:	d501      	bpl.n	80046e8 <_printf_i+0xec>
 80046e4:	681e      	ldr	r6, [r3, #0]
 80046e6:	e002      	b.n	80046ee <_printf_i+0xf2>
 80046e8:	0646      	lsls	r6, r0, #25
 80046ea:	d5fb      	bpl.n	80046e4 <_printf_i+0xe8>
 80046ec:	881e      	ldrh	r6, [r3, #0]
 80046ee:	2f6f      	cmp	r7, #111	; 0x6f
 80046f0:	bf0c      	ite	eq
 80046f2:	2308      	moveq	r3, #8
 80046f4:	230a      	movne	r3, #10
 80046f6:	4852      	ldr	r0, [pc, #328]	; (8004840 <_printf_i+0x244>)
 80046f8:	2100      	movs	r1, #0
 80046fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046fe:	6865      	ldr	r5, [r4, #4]
 8004700:	2d00      	cmp	r5, #0
 8004702:	bfa8      	it	ge
 8004704:	6821      	ldrge	r1, [r4, #0]
 8004706:	60a5      	str	r5, [r4, #8]
 8004708:	bfa4      	itt	ge
 800470a:	f021 0104 	bicge.w	r1, r1, #4
 800470e:	6021      	strge	r1, [r4, #0]
 8004710:	b90e      	cbnz	r6, 8004716 <_printf_i+0x11a>
 8004712:	2d00      	cmp	r5, #0
 8004714:	d04d      	beq.n	80047b2 <_printf_i+0x1b6>
 8004716:	4615      	mov	r5, r2
 8004718:	fbb6 f1f3 	udiv	r1, r6, r3
 800471c:	fb03 6711 	mls	r7, r3, r1, r6
 8004720:	5dc7      	ldrb	r7, [r0, r7]
 8004722:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004726:	4637      	mov	r7, r6
 8004728:	42bb      	cmp	r3, r7
 800472a:	460e      	mov	r6, r1
 800472c:	d9f4      	bls.n	8004718 <_printf_i+0x11c>
 800472e:	2b08      	cmp	r3, #8
 8004730:	d10b      	bne.n	800474a <_printf_i+0x14e>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	07de      	lsls	r6, r3, #31
 8004736:	d508      	bpl.n	800474a <_printf_i+0x14e>
 8004738:	6923      	ldr	r3, [r4, #16]
 800473a:	6861      	ldr	r1, [r4, #4]
 800473c:	4299      	cmp	r1, r3
 800473e:	bfde      	ittt	le
 8004740:	2330      	movle	r3, #48	; 0x30
 8004742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004746:	f105 35ff 	addle.w	r5, r5, #4294967295
 800474a:	1b52      	subs	r2, r2, r5
 800474c:	6122      	str	r2, [r4, #16]
 800474e:	464b      	mov	r3, r9
 8004750:	4621      	mov	r1, r4
 8004752:	4640      	mov	r0, r8
 8004754:	f8cd a000 	str.w	sl, [sp]
 8004758:	aa03      	add	r2, sp, #12
 800475a:	f7ff fedf 	bl	800451c <_printf_common>
 800475e:	3001      	adds	r0, #1
 8004760:	d14c      	bne.n	80047fc <_printf_i+0x200>
 8004762:	f04f 30ff 	mov.w	r0, #4294967295
 8004766:	b004      	add	sp, #16
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	4834      	ldr	r0, [pc, #208]	; (8004840 <_printf_i+0x244>)
 800476e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004772:	6829      	ldr	r1, [r5, #0]
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	f851 6b04 	ldr.w	r6, [r1], #4
 800477a:	6029      	str	r1, [r5, #0]
 800477c:	061d      	lsls	r5, r3, #24
 800477e:	d514      	bpl.n	80047aa <_printf_i+0x1ae>
 8004780:	07df      	lsls	r7, r3, #31
 8004782:	bf44      	itt	mi
 8004784:	f043 0320 	orrmi.w	r3, r3, #32
 8004788:	6023      	strmi	r3, [r4, #0]
 800478a:	b91e      	cbnz	r6, 8004794 <_printf_i+0x198>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	f023 0320 	bic.w	r3, r3, #32
 8004792:	6023      	str	r3, [r4, #0]
 8004794:	2310      	movs	r3, #16
 8004796:	e7af      	b.n	80046f8 <_printf_i+0xfc>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	f043 0320 	orr.w	r3, r3, #32
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	2378      	movs	r3, #120	; 0x78
 80047a2:	4828      	ldr	r0, [pc, #160]	; (8004844 <_printf_i+0x248>)
 80047a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047a8:	e7e3      	b.n	8004772 <_printf_i+0x176>
 80047aa:	0659      	lsls	r1, r3, #25
 80047ac:	bf48      	it	mi
 80047ae:	b2b6      	uxthmi	r6, r6
 80047b0:	e7e6      	b.n	8004780 <_printf_i+0x184>
 80047b2:	4615      	mov	r5, r2
 80047b4:	e7bb      	b.n	800472e <_printf_i+0x132>
 80047b6:	682b      	ldr	r3, [r5, #0]
 80047b8:	6826      	ldr	r6, [r4, #0]
 80047ba:	1d18      	adds	r0, r3, #4
 80047bc:	6961      	ldr	r1, [r4, #20]
 80047be:	6028      	str	r0, [r5, #0]
 80047c0:	0635      	lsls	r5, r6, #24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	d501      	bpl.n	80047ca <_printf_i+0x1ce>
 80047c6:	6019      	str	r1, [r3, #0]
 80047c8:	e002      	b.n	80047d0 <_printf_i+0x1d4>
 80047ca:	0670      	lsls	r0, r6, #25
 80047cc:	d5fb      	bpl.n	80047c6 <_printf_i+0x1ca>
 80047ce:	8019      	strh	r1, [r3, #0]
 80047d0:	2300      	movs	r3, #0
 80047d2:	4615      	mov	r5, r2
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	e7ba      	b.n	800474e <_printf_i+0x152>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	2100      	movs	r1, #0
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	602a      	str	r2, [r5, #0]
 80047e0:	681d      	ldr	r5, [r3, #0]
 80047e2:	6862      	ldr	r2, [r4, #4]
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 fb13 	bl	8004e10 <memchr>
 80047ea:	b108      	cbz	r0, 80047f0 <_printf_i+0x1f4>
 80047ec:	1b40      	subs	r0, r0, r5
 80047ee:	6060      	str	r0, [r4, #4]
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	6123      	str	r3, [r4, #16]
 80047f4:	2300      	movs	r3, #0
 80047f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fa:	e7a8      	b.n	800474e <_printf_i+0x152>
 80047fc:	462a      	mov	r2, r5
 80047fe:	4649      	mov	r1, r9
 8004800:	4640      	mov	r0, r8
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	47d0      	blx	sl
 8004806:	3001      	adds	r0, #1
 8004808:	d0ab      	beq.n	8004762 <_printf_i+0x166>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	079b      	lsls	r3, r3, #30
 800480e:	d413      	bmi.n	8004838 <_printf_i+0x23c>
 8004810:	68e0      	ldr	r0, [r4, #12]
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	4298      	cmp	r0, r3
 8004816:	bfb8      	it	lt
 8004818:	4618      	movlt	r0, r3
 800481a:	e7a4      	b.n	8004766 <_printf_i+0x16a>
 800481c:	2301      	movs	r3, #1
 800481e:	4632      	mov	r2, r6
 8004820:	4649      	mov	r1, r9
 8004822:	4640      	mov	r0, r8
 8004824:	47d0      	blx	sl
 8004826:	3001      	adds	r0, #1
 8004828:	d09b      	beq.n	8004762 <_printf_i+0x166>
 800482a:	3501      	adds	r5, #1
 800482c:	68e3      	ldr	r3, [r4, #12]
 800482e:	9903      	ldr	r1, [sp, #12]
 8004830:	1a5b      	subs	r3, r3, r1
 8004832:	42ab      	cmp	r3, r5
 8004834:	dcf2      	bgt.n	800481c <_printf_i+0x220>
 8004836:	e7eb      	b.n	8004810 <_printf_i+0x214>
 8004838:	2500      	movs	r5, #0
 800483a:	f104 0619 	add.w	r6, r4, #25
 800483e:	e7f5      	b.n	800482c <_printf_i+0x230>
 8004840:	0800534d 	.word	0x0800534d
 8004844:	0800535e 	.word	0x0800535e

08004848 <__swbuf_r>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	460e      	mov	r6, r1
 800484c:	4614      	mov	r4, r2
 800484e:	4605      	mov	r5, r0
 8004850:	b118      	cbz	r0, 800485a <__swbuf_r+0x12>
 8004852:	6983      	ldr	r3, [r0, #24]
 8004854:	b90b      	cbnz	r3, 800485a <__swbuf_r+0x12>
 8004856:	f000 f9d5 	bl	8004c04 <__sinit>
 800485a:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <__swbuf_r+0x98>)
 800485c:	429c      	cmp	r4, r3
 800485e:	d12b      	bne.n	80048b8 <__swbuf_r+0x70>
 8004860:	686c      	ldr	r4, [r5, #4]
 8004862:	69a3      	ldr	r3, [r4, #24]
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	071a      	lsls	r2, r3, #28
 800486a:	d52f      	bpl.n	80048cc <__swbuf_r+0x84>
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	b36b      	cbz	r3, 80048cc <__swbuf_r+0x84>
 8004870:	6923      	ldr	r3, [r4, #16]
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	b2f6      	uxtb	r6, r6
 8004876:	1ac0      	subs	r0, r0, r3
 8004878:	6963      	ldr	r3, [r4, #20]
 800487a:	4637      	mov	r7, r6
 800487c:	4283      	cmp	r3, r0
 800487e:	dc04      	bgt.n	800488a <__swbuf_r+0x42>
 8004880:	4621      	mov	r1, r4
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f92a 	bl	8004adc <_fflush_r>
 8004888:	bb30      	cbnz	r0, 80048d8 <__swbuf_r+0x90>
 800488a:	68a3      	ldr	r3, [r4, #8]
 800488c:	3001      	adds	r0, #1
 800488e:	3b01      	subs	r3, #1
 8004890:	60a3      	str	r3, [r4, #8]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	6022      	str	r2, [r4, #0]
 8004898:	701e      	strb	r6, [r3, #0]
 800489a:	6963      	ldr	r3, [r4, #20]
 800489c:	4283      	cmp	r3, r0
 800489e:	d004      	beq.n	80048aa <__swbuf_r+0x62>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	07db      	lsls	r3, r3, #31
 80048a4:	d506      	bpl.n	80048b4 <__swbuf_r+0x6c>
 80048a6:	2e0a      	cmp	r6, #10
 80048a8:	d104      	bne.n	80048b4 <__swbuf_r+0x6c>
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f915 	bl	8004adc <_fflush_r>
 80048b2:	b988      	cbnz	r0, 80048d8 <__swbuf_r+0x90>
 80048b4:	4638      	mov	r0, r7
 80048b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <__swbuf_r+0x9c>)
 80048ba:	429c      	cmp	r4, r3
 80048bc:	d101      	bne.n	80048c2 <__swbuf_r+0x7a>
 80048be:	68ac      	ldr	r4, [r5, #8]
 80048c0:	e7cf      	b.n	8004862 <__swbuf_r+0x1a>
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <__swbuf_r+0xa0>)
 80048c4:	429c      	cmp	r4, r3
 80048c6:	bf08      	it	eq
 80048c8:	68ec      	ldreq	r4, [r5, #12]
 80048ca:	e7ca      	b.n	8004862 <__swbuf_r+0x1a>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 f80c 	bl	80048ec <__swsetup_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d0cb      	beq.n	8004870 <__swbuf_r+0x28>
 80048d8:	f04f 37ff 	mov.w	r7, #4294967295
 80048dc:	e7ea      	b.n	80048b4 <__swbuf_r+0x6c>
 80048de:	bf00      	nop
 80048e0:	08005390 	.word	0x08005390
 80048e4:	080053b0 	.word	0x080053b0
 80048e8:	08005370 	.word	0x08005370

080048ec <__swsetup_r>:
 80048ec:	4b32      	ldr	r3, [pc, #200]	; (80049b8 <__swsetup_r+0xcc>)
 80048ee:	b570      	push	{r4, r5, r6, lr}
 80048f0:	681d      	ldr	r5, [r3, #0]
 80048f2:	4606      	mov	r6, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	b125      	cbz	r5, 8004902 <__swsetup_r+0x16>
 80048f8:	69ab      	ldr	r3, [r5, #24]
 80048fa:	b913      	cbnz	r3, 8004902 <__swsetup_r+0x16>
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f981 	bl	8004c04 <__sinit>
 8004902:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <__swsetup_r+0xd0>)
 8004904:	429c      	cmp	r4, r3
 8004906:	d10f      	bne.n	8004928 <__swsetup_r+0x3c>
 8004908:	686c      	ldr	r4, [r5, #4]
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004910:	0719      	lsls	r1, r3, #28
 8004912:	d42c      	bmi.n	800496e <__swsetup_r+0x82>
 8004914:	06dd      	lsls	r5, r3, #27
 8004916:	d411      	bmi.n	800493c <__swsetup_r+0x50>
 8004918:	2309      	movs	r3, #9
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	81a3      	strh	r3, [r4, #12]
 8004926:	e03e      	b.n	80049a6 <__swsetup_r+0xba>
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <__swsetup_r+0xd4>)
 800492a:	429c      	cmp	r4, r3
 800492c:	d101      	bne.n	8004932 <__swsetup_r+0x46>
 800492e:	68ac      	ldr	r4, [r5, #8]
 8004930:	e7eb      	b.n	800490a <__swsetup_r+0x1e>
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <__swsetup_r+0xd8>)
 8004934:	429c      	cmp	r4, r3
 8004936:	bf08      	it	eq
 8004938:	68ec      	ldreq	r4, [r5, #12]
 800493a:	e7e6      	b.n	800490a <__swsetup_r+0x1e>
 800493c:	0758      	lsls	r0, r3, #29
 800493e:	d512      	bpl.n	8004966 <__swsetup_r+0x7a>
 8004940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004942:	b141      	cbz	r1, 8004956 <__swsetup_r+0x6a>
 8004944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004948:	4299      	cmp	r1, r3
 800494a:	d002      	beq.n	8004952 <__swsetup_r+0x66>
 800494c:	4630      	mov	r0, r6
 800494e:	f000 fa6d 	bl	8004e2c <_free_r>
 8004952:	2300      	movs	r3, #0
 8004954:	6363      	str	r3, [r4, #52]	; 0x34
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	2300      	movs	r3, #0
 8004960:	6063      	str	r3, [r4, #4]
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f043 0308 	orr.w	r3, r3, #8
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	6923      	ldr	r3, [r4, #16]
 8004970:	b94b      	cbnz	r3, 8004986 <__swsetup_r+0x9a>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497c:	d003      	beq.n	8004986 <__swsetup_r+0x9a>
 800497e:	4621      	mov	r1, r4
 8004980:	4630      	mov	r0, r6
 8004982:	f000 fa05 	bl	8004d90 <__smakebuf_r>
 8004986:	89a0      	ldrh	r0, [r4, #12]
 8004988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800498c:	f010 0301 	ands.w	r3, r0, #1
 8004990:	d00a      	beq.n	80049a8 <__swsetup_r+0xbc>
 8004992:	2300      	movs	r3, #0
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	6963      	ldr	r3, [r4, #20]
 8004998:	425b      	negs	r3, r3
 800499a:	61a3      	str	r3, [r4, #24]
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	b943      	cbnz	r3, 80049b2 <__swsetup_r+0xc6>
 80049a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049a4:	d1ba      	bne.n	800491c <__swsetup_r+0x30>
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	0781      	lsls	r1, r0, #30
 80049aa:	bf58      	it	pl
 80049ac:	6963      	ldrpl	r3, [r4, #20]
 80049ae:	60a3      	str	r3, [r4, #8]
 80049b0:	e7f4      	b.n	800499c <__swsetup_r+0xb0>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e7f7      	b.n	80049a6 <__swsetup_r+0xba>
 80049b6:	bf00      	nop
 80049b8:	200002cc 	.word	0x200002cc
 80049bc:	08005390 	.word	0x08005390
 80049c0:	080053b0 	.word	0x080053b0
 80049c4:	08005370 	.word	0x08005370

080049c8 <abort>:
 80049c8:	2006      	movs	r0, #6
 80049ca:	b508      	push	{r3, lr}
 80049cc:	f000 fb42 	bl	8005054 <raise>
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7fb fe2a 	bl	800062a <_exit>
	...

080049d8 <__sflush_r>:
 80049d8:	898a      	ldrh	r2, [r1, #12]
 80049da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049dc:	4605      	mov	r5, r0
 80049de:	0710      	lsls	r0, r2, #28
 80049e0:	460c      	mov	r4, r1
 80049e2:	d457      	bmi.n	8004a94 <__sflush_r+0xbc>
 80049e4:	684b      	ldr	r3, [r1, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	dc04      	bgt.n	80049f4 <__sflush_r+0x1c>
 80049ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	dc01      	bgt.n	80049f4 <__sflush_r+0x1c>
 80049f0:	2000      	movs	r0, #0
 80049f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049f6:	2e00      	cmp	r6, #0
 80049f8:	d0fa      	beq.n	80049f0 <__sflush_r+0x18>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a00:	682f      	ldr	r7, [r5, #0]
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	d032      	beq.n	8004a6c <__sflush_r+0x94>
 8004a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	075a      	lsls	r2, r3, #29
 8004a0c:	d505      	bpl.n	8004a1a <__sflush_r+0x42>
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	1ac0      	subs	r0, r0, r3
 8004a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a14:	b10b      	cbz	r3, 8004a1a <__sflush_r+0x42>
 8004a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a18:	1ac0      	subs	r0, r0, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a20:	4628      	mov	r0, r5
 8004a22:	6a21      	ldr	r1, [r4, #32]
 8004a24:	47b0      	blx	r6
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	d106      	bne.n	8004a3a <__sflush_r+0x62>
 8004a2c:	6829      	ldr	r1, [r5, #0]
 8004a2e:	291d      	cmp	r1, #29
 8004a30:	d82c      	bhi.n	8004a8c <__sflush_r+0xb4>
 8004a32:	4a29      	ldr	r2, [pc, #164]	; (8004ad8 <__sflush_r+0x100>)
 8004a34:	40ca      	lsrs	r2, r1
 8004a36:	07d6      	lsls	r6, r2, #31
 8004a38:	d528      	bpl.n	8004a8c <__sflush_r+0xb4>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	6062      	str	r2, [r4, #4]
 8004a3e:	6922      	ldr	r2, [r4, #16]
 8004a40:	04d9      	lsls	r1, r3, #19
 8004a42:	6022      	str	r2, [r4, #0]
 8004a44:	d504      	bpl.n	8004a50 <__sflush_r+0x78>
 8004a46:	1c42      	adds	r2, r0, #1
 8004a48:	d101      	bne.n	8004a4e <__sflush_r+0x76>
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	b903      	cbnz	r3, 8004a50 <__sflush_r+0x78>
 8004a4e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a52:	602f      	str	r7, [r5, #0]
 8004a54:	2900      	cmp	r1, #0
 8004a56:	d0cb      	beq.n	80049f0 <__sflush_r+0x18>
 8004a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a5c:	4299      	cmp	r1, r3
 8004a5e:	d002      	beq.n	8004a66 <__sflush_r+0x8e>
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f9e3 	bl	8004e2c <_free_r>
 8004a66:	2000      	movs	r0, #0
 8004a68:	6360      	str	r0, [r4, #52]	; 0x34
 8004a6a:	e7c2      	b.n	80049f2 <__sflush_r+0x1a>
 8004a6c:	6a21      	ldr	r1, [r4, #32]
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b0      	blx	r6
 8004a74:	1c41      	adds	r1, r0, #1
 8004a76:	d1c7      	bne.n	8004a08 <__sflush_r+0x30>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0c4      	beq.n	8004a08 <__sflush_r+0x30>
 8004a7e:	2b1d      	cmp	r3, #29
 8004a80:	d001      	beq.n	8004a86 <__sflush_r+0xae>
 8004a82:	2b16      	cmp	r3, #22
 8004a84:	d101      	bne.n	8004a8a <__sflush_r+0xb2>
 8004a86:	602f      	str	r7, [r5, #0]
 8004a88:	e7b2      	b.n	80049f0 <__sflush_r+0x18>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	e7ae      	b.n	80049f2 <__sflush_r+0x1a>
 8004a94:	690f      	ldr	r7, [r1, #16]
 8004a96:	2f00      	cmp	r7, #0
 8004a98:	d0aa      	beq.n	80049f0 <__sflush_r+0x18>
 8004a9a:	0793      	lsls	r3, r2, #30
 8004a9c:	bf18      	it	ne
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	680e      	ldr	r6, [r1, #0]
 8004aa2:	bf08      	it	eq
 8004aa4:	694b      	ldreq	r3, [r1, #20]
 8004aa6:	1bf6      	subs	r6, r6, r7
 8004aa8:	600f      	str	r7, [r1, #0]
 8004aaa:	608b      	str	r3, [r1, #8]
 8004aac:	2e00      	cmp	r6, #0
 8004aae:	dd9f      	ble.n	80049f0 <__sflush_r+0x18>
 8004ab0:	4633      	mov	r3, r6
 8004ab2:	463a      	mov	r2, r7
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	6a21      	ldr	r1, [r4, #32]
 8004ab8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004abc:	47e0      	blx	ip
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	dc06      	bgt.n	8004ad0 <__sflush_r+0xf8>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	e790      	b.n	80049f2 <__sflush_r+0x1a>
 8004ad0:	4407      	add	r7, r0
 8004ad2:	1a36      	subs	r6, r6, r0
 8004ad4:	e7ea      	b.n	8004aac <__sflush_r+0xd4>
 8004ad6:	bf00      	nop
 8004ad8:	20400001 	.word	0x20400001

08004adc <_fflush_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	690b      	ldr	r3, [r1, #16]
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	b913      	cbnz	r3, 8004aec <_fflush_r+0x10>
 8004ae6:	2500      	movs	r5, #0
 8004ae8:	4628      	mov	r0, r5
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	b118      	cbz	r0, 8004af6 <_fflush_r+0x1a>
 8004aee:	6983      	ldr	r3, [r0, #24]
 8004af0:	b90b      	cbnz	r3, 8004af6 <_fflush_r+0x1a>
 8004af2:	f000 f887 	bl	8004c04 <__sinit>
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <_fflush_r+0x6c>)
 8004af8:	429c      	cmp	r4, r3
 8004afa:	d11b      	bne.n	8004b34 <_fflush_r+0x58>
 8004afc:	686c      	ldr	r4, [r5, #4]
 8004afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ef      	beq.n	8004ae6 <_fflush_r+0xa>
 8004b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b08:	07d0      	lsls	r0, r2, #31
 8004b0a:	d404      	bmi.n	8004b16 <_fflush_r+0x3a>
 8004b0c:	0599      	lsls	r1, r3, #22
 8004b0e:	d402      	bmi.n	8004b16 <_fflush_r+0x3a>
 8004b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b12:	f000 f915 	bl	8004d40 <__retarget_lock_acquire_recursive>
 8004b16:	4628      	mov	r0, r5
 8004b18:	4621      	mov	r1, r4
 8004b1a:	f7ff ff5d 	bl	80049d8 <__sflush_r>
 8004b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b20:	4605      	mov	r5, r0
 8004b22:	07da      	lsls	r2, r3, #31
 8004b24:	d4e0      	bmi.n	8004ae8 <_fflush_r+0xc>
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	059b      	lsls	r3, r3, #22
 8004b2a:	d4dd      	bmi.n	8004ae8 <_fflush_r+0xc>
 8004b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2e:	f000 f908 	bl	8004d42 <__retarget_lock_release_recursive>
 8004b32:	e7d9      	b.n	8004ae8 <_fflush_r+0xc>
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <_fflush_r+0x70>)
 8004b36:	429c      	cmp	r4, r3
 8004b38:	d101      	bne.n	8004b3e <_fflush_r+0x62>
 8004b3a:	68ac      	ldr	r4, [r5, #8]
 8004b3c:	e7df      	b.n	8004afe <_fflush_r+0x22>
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <_fflush_r+0x74>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	bf08      	it	eq
 8004b44:	68ec      	ldreq	r4, [r5, #12]
 8004b46:	e7da      	b.n	8004afe <_fflush_r+0x22>
 8004b48:	08005390 	.word	0x08005390
 8004b4c:	080053b0 	.word	0x080053b0
 8004b50:	08005370 	.word	0x08005370

08004b54 <std>:
 8004b54:	2300      	movs	r3, #0
 8004b56:	b510      	push	{r4, lr}
 8004b58:	4604      	mov	r4, r0
 8004b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b62:	6083      	str	r3, [r0, #8]
 8004b64:	8181      	strh	r1, [r0, #12]
 8004b66:	6643      	str	r3, [r0, #100]	; 0x64
 8004b68:	81c2      	strh	r2, [r0, #14]
 8004b6a:	6183      	str	r3, [r0, #24]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	2208      	movs	r2, #8
 8004b70:	305c      	adds	r0, #92	; 0x5c
 8004b72:	f7ff fb73 	bl	800425c <memset>
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <std+0x38>)
 8004b78:	6224      	str	r4, [r4, #32]
 8004b7a:	6263      	str	r3, [r4, #36]	; 0x24
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <std+0x3c>)
 8004b7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <std+0x40>)
 8004b82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <std+0x44>)
 8004b86:	6323      	str	r3, [r4, #48]	; 0x30
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	bf00      	nop
 8004b8c:	0800508d 	.word	0x0800508d
 8004b90:	080050af 	.word	0x080050af
 8004b94:	080050e7 	.word	0x080050e7
 8004b98:	0800510b 	.word	0x0800510b

08004b9c <_cleanup_r>:
 8004b9c:	4901      	ldr	r1, [pc, #4]	; (8004ba4 <_cleanup_r+0x8>)
 8004b9e:	f000 b8af 	b.w	8004d00 <_fwalk_reent>
 8004ba2:	bf00      	nop
 8004ba4:	08004add 	.word	0x08004add

08004ba8 <__sfmoreglue>:
 8004ba8:	2268      	movs	r2, #104	; 0x68
 8004baa:	b570      	push	{r4, r5, r6, lr}
 8004bac:	1e4d      	subs	r5, r1, #1
 8004bae:	4355      	muls	r5, r2
 8004bb0:	460e      	mov	r6, r1
 8004bb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bb6:	f000 f9a1 	bl	8004efc <_malloc_r>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	b140      	cbz	r0, 8004bd0 <__sfmoreglue+0x28>
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	e9c0 1600 	strd	r1, r6, [r0]
 8004bc4:	300c      	adds	r0, #12
 8004bc6:	60a0      	str	r0, [r4, #8]
 8004bc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bcc:	f7ff fb46 	bl	800425c <memset>
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}

08004bd4 <__sfp_lock_acquire>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__sfp_lock_acquire+0x8>)
 8004bd6:	f000 b8b3 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20000605 	.word	0x20000605

08004be0 <__sfp_lock_release>:
 8004be0:	4801      	ldr	r0, [pc, #4]	; (8004be8 <__sfp_lock_release+0x8>)
 8004be2:	f000 b8ae 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	20000605 	.word	0x20000605

08004bec <__sinit_lock_acquire>:
 8004bec:	4801      	ldr	r0, [pc, #4]	; (8004bf4 <__sinit_lock_acquire+0x8>)
 8004bee:	f000 b8a7 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	20000606 	.word	0x20000606

08004bf8 <__sinit_lock_release>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__sinit_lock_release+0x8>)
 8004bfa:	f000 b8a2 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20000606 	.word	0x20000606

08004c04 <__sinit>:
 8004c04:	b510      	push	{r4, lr}
 8004c06:	4604      	mov	r4, r0
 8004c08:	f7ff fff0 	bl	8004bec <__sinit_lock_acquire>
 8004c0c:	69a3      	ldr	r3, [r4, #24]
 8004c0e:	b11b      	cbz	r3, 8004c18 <__sinit+0x14>
 8004c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c14:	f7ff bff0 	b.w	8004bf8 <__sinit_lock_release>
 8004c18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c1c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <__sinit+0x68>)
 8004c20:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <__sinit+0x6c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c26:	42a3      	cmp	r3, r4
 8004c28:	bf08      	it	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	bf08      	it	eq
 8004c30:	61a3      	streq	r3, [r4, #24]
 8004c32:	f000 f81f 	bl	8004c74 <__sfp>
 8004c36:	6060      	str	r0, [r4, #4]
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 f81b 	bl	8004c74 <__sfp>
 8004c3e:	60a0      	str	r0, [r4, #8]
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 f817 	bl	8004c74 <__sfp>
 8004c46:	2200      	movs	r2, #0
 8004c48:	2104      	movs	r1, #4
 8004c4a:	60e0      	str	r0, [r4, #12]
 8004c4c:	6860      	ldr	r0, [r4, #4]
 8004c4e:	f7ff ff81 	bl	8004b54 <std>
 8004c52:	2201      	movs	r2, #1
 8004c54:	2109      	movs	r1, #9
 8004c56:	68a0      	ldr	r0, [r4, #8]
 8004c58:	f7ff ff7c 	bl	8004b54 <std>
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	2112      	movs	r1, #18
 8004c60:	68e0      	ldr	r0, [r4, #12]
 8004c62:	f7ff ff77 	bl	8004b54 <std>
 8004c66:	2301      	movs	r3, #1
 8004c68:	61a3      	str	r3, [r4, #24]
 8004c6a:	e7d1      	b.n	8004c10 <__sinit+0xc>
 8004c6c:	08005338 	.word	0x08005338
 8004c70:	08004b9d 	.word	0x08004b9d

08004c74 <__sfp>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	4607      	mov	r7, r0
 8004c78:	f7ff ffac 	bl	8004bd4 <__sfp_lock_acquire>
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <__sfp+0x84>)
 8004c7e:	681e      	ldr	r6, [r3, #0]
 8004c80:	69b3      	ldr	r3, [r6, #24]
 8004c82:	b913      	cbnz	r3, 8004c8a <__sfp+0x16>
 8004c84:	4630      	mov	r0, r6
 8004c86:	f7ff ffbd 	bl	8004c04 <__sinit>
 8004c8a:	3648      	adds	r6, #72	; 0x48
 8004c8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	d503      	bpl.n	8004c9c <__sfp+0x28>
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	b30b      	cbz	r3, 8004cdc <__sfp+0x68>
 8004c98:	6836      	ldr	r6, [r6, #0]
 8004c9a:	e7f7      	b.n	8004c8c <__sfp+0x18>
 8004c9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ca0:	b9d5      	cbnz	r5, 8004cd8 <__sfp+0x64>
 8004ca2:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <__sfp+0x88>)
 8004ca4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ca8:	60e3      	str	r3, [r4, #12]
 8004caa:	6665      	str	r5, [r4, #100]	; 0x64
 8004cac:	f000 f847 	bl	8004d3e <__retarget_lock_init_recursive>
 8004cb0:	f7ff ff96 	bl	8004be0 <__sfp_lock_release>
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004cc0:	6025      	str	r5, [r4, #0]
 8004cc2:	61a5      	str	r5, [r4, #24]
 8004cc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cc8:	f7ff fac8 	bl	800425c <memset>
 8004ccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004cd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd8:	3468      	adds	r4, #104	; 0x68
 8004cda:	e7d9      	b.n	8004c90 <__sfp+0x1c>
 8004cdc:	2104      	movs	r1, #4
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f7ff ff62 	bl	8004ba8 <__sfmoreglue>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	6030      	str	r0, [r6, #0]
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d1d5      	bne.n	8004c98 <__sfp+0x24>
 8004cec:	f7ff ff78 	bl	8004be0 <__sfp_lock_release>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	e7ee      	b.n	8004cd4 <__sfp+0x60>
 8004cf6:	bf00      	nop
 8004cf8:	08005338 	.word	0x08005338
 8004cfc:	ffff0001 	.word	0xffff0001

08004d00 <_fwalk_reent>:
 8004d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d04:	4606      	mov	r6, r0
 8004d06:	4688      	mov	r8, r1
 8004d08:	2700      	movs	r7, #0
 8004d0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d12:	f1b9 0901 	subs.w	r9, r9, #1
 8004d16:	d505      	bpl.n	8004d24 <_fwalk_reent+0x24>
 8004d18:	6824      	ldr	r4, [r4, #0]
 8004d1a:	2c00      	cmp	r4, #0
 8004d1c:	d1f7      	bne.n	8004d0e <_fwalk_reent+0xe>
 8004d1e:	4638      	mov	r0, r7
 8004d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d24:	89ab      	ldrh	r3, [r5, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d907      	bls.n	8004d3a <_fwalk_reent+0x3a>
 8004d2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	d003      	beq.n	8004d3a <_fwalk_reent+0x3a>
 8004d32:	4629      	mov	r1, r5
 8004d34:	4630      	mov	r0, r6
 8004d36:	47c0      	blx	r8
 8004d38:	4307      	orrs	r7, r0
 8004d3a:	3568      	adds	r5, #104	; 0x68
 8004d3c:	e7e9      	b.n	8004d12 <_fwalk_reent+0x12>

08004d3e <__retarget_lock_init_recursive>:
 8004d3e:	4770      	bx	lr

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <__swhatbuf_r>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	460e      	mov	r6, r1
 8004d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	2900      	cmp	r1, #0
 8004d50:	461d      	mov	r5, r3
 8004d52:	b096      	sub	sp, #88	; 0x58
 8004d54:	da08      	bge.n	8004d68 <__swhatbuf_r+0x24>
 8004d56:	2200      	movs	r2, #0
 8004d58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d5c:	602a      	str	r2, [r5, #0]
 8004d5e:	061a      	lsls	r2, r3, #24
 8004d60:	d410      	bmi.n	8004d84 <__swhatbuf_r+0x40>
 8004d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d66:	e00e      	b.n	8004d86 <__swhatbuf_r+0x42>
 8004d68:	466a      	mov	r2, sp
 8004d6a:	f000 f9f5 	bl	8005158 <_fstat_r>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	dbf1      	blt.n	8004d56 <__swhatbuf_r+0x12>
 8004d72:	9a01      	ldr	r2, [sp, #4]
 8004d74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d7c:	425a      	negs	r2, r3
 8004d7e:	415a      	adcs	r2, r3
 8004d80:	602a      	str	r2, [r5, #0]
 8004d82:	e7ee      	b.n	8004d62 <__swhatbuf_r+0x1e>
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	2000      	movs	r0, #0
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	b016      	add	sp, #88	; 0x58
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d90 <__smakebuf_r>:
 8004d90:	898b      	ldrh	r3, [r1, #12]
 8004d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d94:	079d      	lsls	r5, r3, #30
 8004d96:	4606      	mov	r6, r0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	d507      	bpl.n	8004dac <__smakebuf_r+0x1c>
 8004d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	6123      	str	r3, [r4, #16]
 8004da4:	2301      	movs	r3, #1
 8004da6:	6163      	str	r3, [r4, #20]
 8004da8:	b002      	add	sp, #8
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	466a      	mov	r2, sp
 8004dae:	ab01      	add	r3, sp, #4
 8004db0:	f7ff ffc8 	bl	8004d44 <__swhatbuf_r>
 8004db4:	9900      	ldr	r1, [sp, #0]
 8004db6:	4605      	mov	r5, r0
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f89f 	bl	8004efc <_malloc_r>
 8004dbe:	b948      	cbnz	r0, 8004dd4 <__smakebuf_r+0x44>
 8004dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc4:	059a      	lsls	r2, r3, #22
 8004dc6:	d4ef      	bmi.n	8004da8 <__smakebuf_r+0x18>
 8004dc8:	f023 0303 	bic.w	r3, r3, #3
 8004dcc:	f043 0302 	orr.w	r3, r3, #2
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	e7e3      	b.n	8004d9c <__smakebuf_r+0xc>
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <__smakebuf_r+0x7c>)
 8004dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	6020      	str	r0, [r4, #0]
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	9b00      	ldr	r3, [sp, #0]
 8004de4:	6120      	str	r0, [r4, #16]
 8004de6:	6163      	str	r3, [r4, #20]
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	b15b      	cbz	r3, 8004e04 <__smakebuf_r+0x74>
 8004dec:	4630      	mov	r0, r6
 8004dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004df2:	f000 f9c3 	bl	800517c <_isatty_r>
 8004df6:	b128      	cbz	r0, 8004e04 <__smakebuf_r+0x74>
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	81a3      	strh	r3, [r4, #12]
 8004e04:	89a0      	ldrh	r0, [r4, #12]
 8004e06:	4305      	orrs	r5, r0
 8004e08:	81a5      	strh	r5, [r4, #12]
 8004e0a:	e7cd      	b.n	8004da8 <__smakebuf_r+0x18>
 8004e0c:	08004b9d 	.word	0x08004b9d

08004e10 <memchr>:
 8004e10:	4603      	mov	r3, r0
 8004e12:	b510      	push	{r4, lr}
 8004e14:	b2c9      	uxtb	r1, r1
 8004e16:	4402      	add	r2, r0
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	d101      	bne.n	8004e22 <memchr+0x12>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e003      	b.n	8004e2a <memchr+0x1a>
 8004e22:	7804      	ldrb	r4, [r0, #0]
 8004e24:	3301      	adds	r3, #1
 8004e26:	428c      	cmp	r4, r1
 8004e28:	d1f6      	bne.n	8004e18 <memchr+0x8>
 8004e2a:	bd10      	pop	{r4, pc}

08004e2c <_free_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4605      	mov	r5, r0
 8004e30:	2900      	cmp	r1, #0
 8004e32:	d040      	beq.n	8004eb6 <_free_r+0x8a>
 8004e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e38:	1f0c      	subs	r4, r1, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfb8      	it	lt
 8004e3e:	18e4      	addlt	r4, r4, r3
 8004e40:	f000 f9be 	bl	80051c0 <__malloc_lock>
 8004e44:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <_free_r+0x8c>)
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	b933      	cbnz	r3, 8004e58 <_free_r+0x2c>
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	6014      	str	r4, [r2, #0]
 8004e4e:	4628      	mov	r0, r5
 8004e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e54:	f000 b9ba 	b.w	80051cc <__malloc_unlock>
 8004e58:	42a3      	cmp	r3, r4
 8004e5a:	d908      	bls.n	8004e6e <_free_r+0x42>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	1821      	adds	r1, r4, r0
 8004e60:	428b      	cmp	r3, r1
 8004e62:	bf01      	itttt	eq
 8004e64:	6819      	ldreq	r1, [r3, #0]
 8004e66:	685b      	ldreq	r3, [r3, #4]
 8004e68:	1809      	addeq	r1, r1, r0
 8004e6a:	6021      	streq	r1, [r4, #0]
 8004e6c:	e7ed      	b.n	8004e4a <_free_r+0x1e>
 8004e6e:	461a      	mov	r2, r3
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b10b      	cbz	r3, 8004e78 <_free_r+0x4c>
 8004e74:	42a3      	cmp	r3, r4
 8004e76:	d9fa      	bls.n	8004e6e <_free_r+0x42>
 8004e78:	6811      	ldr	r1, [r2, #0]
 8004e7a:	1850      	adds	r0, r2, r1
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d10b      	bne.n	8004e98 <_free_r+0x6c>
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	4401      	add	r1, r0
 8004e84:	1850      	adds	r0, r2, r1
 8004e86:	4283      	cmp	r3, r0
 8004e88:	6011      	str	r1, [r2, #0]
 8004e8a:	d1e0      	bne.n	8004e4e <_free_r+0x22>
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4401      	add	r1, r0
 8004e92:	6011      	str	r1, [r2, #0]
 8004e94:	6053      	str	r3, [r2, #4]
 8004e96:	e7da      	b.n	8004e4e <_free_r+0x22>
 8004e98:	d902      	bls.n	8004ea0 <_free_r+0x74>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	602b      	str	r3, [r5, #0]
 8004e9e:	e7d6      	b.n	8004e4e <_free_r+0x22>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	1821      	adds	r1, r4, r0
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	bf01      	itttt	eq
 8004ea8:	6819      	ldreq	r1, [r3, #0]
 8004eaa:	685b      	ldreq	r3, [r3, #4]
 8004eac:	1809      	addeq	r1, r1, r0
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	6063      	str	r3, [r4, #4]
 8004eb2:	6054      	str	r4, [r2, #4]
 8004eb4:	e7cb      	b.n	8004e4e <_free_r+0x22>
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	20000608 	.word	0x20000608

08004ebc <sbrk_aligned>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4e0e      	ldr	r6, [pc, #56]	; (8004ef8 <sbrk_aligned+0x3c>)
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	6831      	ldr	r1, [r6, #0]
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	b911      	cbnz	r1, 8004ece <sbrk_aligned+0x12>
 8004ec8:	f000 f88c 	bl	8004fe4 <_sbrk_r>
 8004ecc:	6030      	str	r0, [r6, #0]
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 f887 	bl	8004fe4 <_sbrk_r>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d00a      	beq.n	8004ef0 <sbrk_aligned+0x34>
 8004eda:	1cc4      	adds	r4, r0, #3
 8004edc:	f024 0403 	bic.w	r4, r4, #3
 8004ee0:	42a0      	cmp	r0, r4
 8004ee2:	d007      	beq.n	8004ef4 <sbrk_aligned+0x38>
 8004ee4:	1a21      	subs	r1, r4, r0
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 f87c 	bl	8004fe4 <_sbrk_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d101      	bne.n	8004ef4 <sbrk_aligned+0x38>
 8004ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	2000060c 	.word	0x2000060c

08004efc <_malloc_r>:
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f00:	1ccd      	adds	r5, r1, #3
 8004f02:	f025 0503 	bic.w	r5, r5, #3
 8004f06:	3508      	adds	r5, #8
 8004f08:	2d0c      	cmp	r5, #12
 8004f0a:	bf38      	it	cc
 8004f0c:	250c      	movcc	r5, #12
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	4607      	mov	r7, r0
 8004f12:	db01      	blt.n	8004f18 <_malloc_r+0x1c>
 8004f14:	42a9      	cmp	r1, r5
 8004f16:	d905      	bls.n	8004f24 <_malloc_r+0x28>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	4630      	mov	r0, r6
 8004f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f24:	4e2e      	ldr	r6, [pc, #184]	; (8004fe0 <_malloc_r+0xe4>)
 8004f26:	f000 f94b 	bl	80051c0 <__malloc_lock>
 8004f2a:	6833      	ldr	r3, [r6, #0]
 8004f2c:	461c      	mov	r4, r3
 8004f2e:	bb34      	cbnz	r4, 8004f7e <_malloc_r+0x82>
 8004f30:	4629      	mov	r1, r5
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7ff ffc2 	bl	8004ebc <sbrk_aligned>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	d14d      	bne.n	8004fda <_malloc_r+0xde>
 8004f3e:	6834      	ldr	r4, [r6, #0]
 8004f40:	4626      	mov	r6, r4
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	d140      	bne.n	8004fc8 <_malloc_r+0xcc>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	eb04 0803 	add.w	r8, r4, r3
 8004f50:	f000 f848 	bl	8004fe4 <_sbrk_r>
 8004f54:	4580      	cmp	r8, r0
 8004f56:	d13a      	bne.n	8004fce <_malloc_r+0xd2>
 8004f58:	6821      	ldr	r1, [r4, #0]
 8004f5a:	3503      	adds	r5, #3
 8004f5c:	1a6d      	subs	r5, r5, r1
 8004f5e:	f025 0503 	bic.w	r5, r5, #3
 8004f62:	3508      	adds	r5, #8
 8004f64:	2d0c      	cmp	r5, #12
 8004f66:	bf38      	it	cc
 8004f68:	250c      	movcc	r5, #12
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7ff ffa5 	bl	8004ebc <sbrk_aligned>
 8004f72:	3001      	adds	r0, #1
 8004f74:	d02b      	beq.n	8004fce <_malloc_r+0xd2>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	442b      	add	r3, r5
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	e00e      	b.n	8004f9c <_malloc_r+0xa0>
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	1b52      	subs	r2, r2, r5
 8004f82:	d41e      	bmi.n	8004fc2 <_malloc_r+0xc6>
 8004f84:	2a0b      	cmp	r2, #11
 8004f86:	d916      	bls.n	8004fb6 <_malloc_r+0xba>
 8004f88:	1961      	adds	r1, r4, r5
 8004f8a:	42a3      	cmp	r3, r4
 8004f8c:	6025      	str	r5, [r4, #0]
 8004f8e:	bf18      	it	ne
 8004f90:	6059      	strne	r1, [r3, #4]
 8004f92:	6863      	ldr	r3, [r4, #4]
 8004f94:	bf08      	it	eq
 8004f96:	6031      	streq	r1, [r6, #0]
 8004f98:	5162      	str	r2, [r4, r5]
 8004f9a:	604b      	str	r3, [r1, #4]
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f104 060b 	add.w	r6, r4, #11
 8004fa2:	f000 f913 	bl	80051cc <__malloc_unlock>
 8004fa6:	f026 0607 	bic.w	r6, r6, #7
 8004faa:	1d23      	adds	r3, r4, #4
 8004fac:	1af2      	subs	r2, r6, r3
 8004fae:	d0b6      	beq.n	8004f1e <_malloc_r+0x22>
 8004fb0:	1b9b      	subs	r3, r3, r6
 8004fb2:	50a3      	str	r3, [r4, r2]
 8004fb4:	e7b3      	b.n	8004f1e <_malloc_r+0x22>
 8004fb6:	6862      	ldr	r2, [r4, #4]
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	bf0c      	ite	eq
 8004fbc:	6032      	streq	r2, [r6, #0]
 8004fbe:	605a      	strne	r2, [r3, #4]
 8004fc0:	e7ec      	b.n	8004f9c <_malloc_r+0xa0>
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	6864      	ldr	r4, [r4, #4]
 8004fc6:	e7b2      	b.n	8004f2e <_malloc_r+0x32>
 8004fc8:	4634      	mov	r4, r6
 8004fca:	6876      	ldr	r6, [r6, #4]
 8004fcc:	e7b9      	b.n	8004f42 <_malloc_r+0x46>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	f000 f8fa 	bl	80051cc <__malloc_unlock>
 8004fd8:	e7a1      	b.n	8004f1e <_malloc_r+0x22>
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	e7de      	b.n	8004f9c <_malloc_r+0xa0>
 8004fde:	bf00      	nop
 8004fe0:	20000608 	.word	0x20000608

08004fe4 <_sbrk_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4d05      	ldr	r5, [pc, #20]	; (8005000 <_sbrk_r+0x1c>)
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fb fb8e 	bl	8000710 <_sbrk>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_sbrk_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_sbrk_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20000610 	.word	0x20000610

08005004 <_raise_r>:
 8005004:	291f      	cmp	r1, #31
 8005006:	b538      	push	{r3, r4, r5, lr}
 8005008:	4604      	mov	r4, r0
 800500a:	460d      	mov	r5, r1
 800500c:	d904      	bls.n	8005018 <_raise_r+0x14>
 800500e:	2316      	movs	r3, #22
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800501a:	b112      	cbz	r2, 8005022 <_raise_r+0x1e>
 800501c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005020:	b94b      	cbnz	r3, 8005036 <_raise_r+0x32>
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f830 	bl	8005088 <_getpid_r>
 8005028:	462a      	mov	r2, r5
 800502a:	4601      	mov	r1, r0
 800502c:	4620      	mov	r0, r4
 800502e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005032:	f000 b817 	b.w	8005064 <_kill_r>
 8005036:	2b01      	cmp	r3, #1
 8005038:	d00a      	beq.n	8005050 <_raise_r+0x4c>
 800503a:	1c59      	adds	r1, r3, #1
 800503c:	d103      	bne.n	8005046 <_raise_r+0x42>
 800503e:	2316      	movs	r3, #22
 8005040:	6003      	str	r3, [r0, #0]
 8005042:	2001      	movs	r0, #1
 8005044:	e7e7      	b.n	8005016 <_raise_r+0x12>
 8005046:	2400      	movs	r4, #0
 8005048:	4628      	mov	r0, r5
 800504a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800504e:	4798      	blx	r3
 8005050:	2000      	movs	r0, #0
 8005052:	e7e0      	b.n	8005016 <_raise_r+0x12>

08005054 <raise>:
 8005054:	4b02      	ldr	r3, [pc, #8]	; (8005060 <raise+0xc>)
 8005056:	4601      	mov	r1, r0
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f7ff bfd3 	b.w	8005004 <_raise_r>
 800505e:	bf00      	nop
 8005060:	200002cc 	.word	0x200002cc

08005064 <_kill_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	2300      	movs	r3, #0
 8005068:	4d06      	ldr	r5, [pc, #24]	; (8005084 <_kill_r+0x20>)
 800506a:	4604      	mov	r4, r0
 800506c:	4608      	mov	r0, r1
 800506e:	4611      	mov	r1, r2
 8005070:	602b      	str	r3, [r5, #0]
 8005072:	f7fb faca 	bl	800060a <_kill>
 8005076:	1c43      	adds	r3, r0, #1
 8005078:	d102      	bne.n	8005080 <_kill_r+0x1c>
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	b103      	cbz	r3, 8005080 <_kill_r+0x1c>
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	bd38      	pop	{r3, r4, r5, pc}
 8005082:	bf00      	nop
 8005084:	20000610 	.word	0x20000610

08005088 <_getpid_r>:
 8005088:	f7fb bab8 	b.w	80005fc <_getpid>

0800508c <__sread>:
 800508c:	b510      	push	{r4, lr}
 800508e:	460c      	mov	r4, r1
 8005090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005094:	f000 f8a0 	bl	80051d8 <_read_r>
 8005098:	2800      	cmp	r0, #0
 800509a:	bfab      	itete	ge
 800509c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800509e:	89a3      	ldrhlt	r3, [r4, #12]
 80050a0:	181b      	addge	r3, r3, r0
 80050a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050a6:	bfac      	ite	ge
 80050a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80050aa:	81a3      	strhlt	r3, [r4, #12]
 80050ac:	bd10      	pop	{r4, pc}

080050ae <__swrite>:
 80050ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b2:	461f      	mov	r7, r3
 80050b4:	898b      	ldrh	r3, [r1, #12]
 80050b6:	4605      	mov	r5, r0
 80050b8:	05db      	lsls	r3, r3, #23
 80050ba:	460c      	mov	r4, r1
 80050bc:	4616      	mov	r6, r2
 80050be:	d505      	bpl.n	80050cc <__swrite+0x1e>
 80050c0:	2302      	movs	r3, #2
 80050c2:	2200      	movs	r2, #0
 80050c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c8:	f000 f868 	bl	800519c <_lseek_r>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	4632      	mov	r2, r6
 80050d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	4628      	mov	r0, r5
 80050d8:	463b      	mov	r3, r7
 80050da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e2:	f000 b817 	b.w	8005114 <_write_r>

080050e6 <__sseek>:
 80050e6:	b510      	push	{r4, lr}
 80050e8:	460c      	mov	r4, r1
 80050ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ee:	f000 f855 	bl	800519c <_lseek_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	bf15      	itete	ne
 80050f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80050fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005102:	81a3      	strheq	r3, [r4, #12]
 8005104:	bf18      	it	ne
 8005106:	81a3      	strhne	r3, [r4, #12]
 8005108:	bd10      	pop	{r4, pc}

0800510a <__sclose>:
 800510a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510e:	f000 b813 	b.w	8005138 <_close_r>
	...

08005114 <_write_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	4611      	mov	r1, r2
 800511c:	2200      	movs	r2, #0
 800511e:	4d05      	ldr	r5, [pc, #20]	; (8005134 <_write_r+0x20>)
 8005120:	602a      	str	r2, [r5, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f7fb faa8 	bl	8000678 <_write>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_write_r+0x1e>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_write_r+0x1e>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000610 	.word	0x20000610

08005138 <_close_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	2300      	movs	r3, #0
 800513c:	4d05      	ldr	r5, [pc, #20]	; (8005154 <_close_r+0x1c>)
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	602b      	str	r3, [r5, #0]
 8005144:	f7fb fab4 	bl	80006b0 <_close>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_close_r+0x1a>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_close_r+0x1a>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20000610 	.word	0x20000610

08005158 <_fstat_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	2300      	movs	r3, #0
 800515c:	4d06      	ldr	r5, [pc, #24]	; (8005178 <_fstat_r+0x20>)
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	4611      	mov	r1, r2
 8005164:	602b      	str	r3, [r5, #0]
 8005166:	f7fb faae 	bl	80006c6 <_fstat>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	d102      	bne.n	8005174 <_fstat_r+0x1c>
 800516e:	682b      	ldr	r3, [r5, #0]
 8005170:	b103      	cbz	r3, 8005174 <_fstat_r+0x1c>
 8005172:	6023      	str	r3, [r4, #0]
 8005174:	bd38      	pop	{r3, r4, r5, pc}
 8005176:	bf00      	nop
 8005178:	20000610 	.word	0x20000610

0800517c <_isatty_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	2300      	movs	r3, #0
 8005180:	4d05      	ldr	r5, [pc, #20]	; (8005198 <_isatty_r+0x1c>)
 8005182:	4604      	mov	r4, r0
 8005184:	4608      	mov	r0, r1
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	f7fb faac 	bl	80006e4 <_isatty>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d102      	bne.n	8005196 <_isatty_r+0x1a>
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	b103      	cbz	r3, 8005196 <_isatty_r+0x1a>
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	bd38      	pop	{r3, r4, r5, pc}
 8005198:	20000610 	.word	0x20000610

0800519c <_lseek_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	2200      	movs	r2, #0
 80051a6:	4d05      	ldr	r5, [pc, #20]	; (80051bc <_lseek_r+0x20>)
 80051a8:	602a      	str	r2, [r5, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	f7fb faa4 	bl	80006f8 <_lseek>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_lseek_r+0x1e>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_lseek_r+0x1e>
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	20000610 	.word	0x20000610

080051c0 <__malloc_lock>:
 80051c0:	4801      	ldr	r0, [pc, #4]	; (80051c8 <__malloc_lock+0x8>)
 80051c2:	f7ff bdbd 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 80051c6:	bf00      	nop
 80051c8:	20000604 	.word	0x20000604

080051cc <__malloc_unlock>:
 80051cc:	4801      	ldr	r0, [pc, #4]	; (80051d4 <__malloc_unlock+0x8>)
 80051ce:	f7ff bdb8 	b.w	8004d42 <__retarget_lock_release_recursive>
 80051d2:	bf00      	nop
 80051d4:	20000604 	.word	0x20000604

080051d8 <_read_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	4611      	mov	r1, r2
 80051e0:	2200      	movs	r2, #0
 80051e2:	4d05      	ldr	r5, [pc, #20]	; (80051f8 <_read_r+0x20>)
 80051e4:	602a      	str	r2, [r5, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f7fb fa29 	bl	800063e <_read>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d102      	bne.n	80051f6 <_read_r+0x1e>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	b103      	cbz	r3, 80051f6 <_read_r+0x1e>
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	bd38      	pop	{r3, r4, r5, pc}
 80051f8:	20000610 	.word	0x20000610

080051fc <_init>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	bf00      	nop
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr

08005208 <_fini>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr
